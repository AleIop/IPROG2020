{"version":3,"sources":["PlaylistModel.js","apiConfig.js","actions/index.js","renderPromise.js","components/Navbar/NavbarPresentational.js","components/Navbar/NavbarContainer.js","components/Search/SearchPresentational.js","components/Search/SearchContainer.js","components/Playlist/PlaylistPresentational.js","components/Playlist/PlaylistContainer.js","components/App.js","reducers/songs.js","reducers/currentPlaylist.js","reducers/audioMuted.js","reducers/navbarHidden.js","reducers/index.js","index.js","components/Settings/SettingsPresentational.js","components/Settings/SettingsContainer.js"],"names":["displaySongs","songListPromise","RenderPromise","render","songs","React","createElement","Fragment","map","song","createSongDisplay","document","getElementById","setTimeout","body","querySelectorAll","forEach","root","id","searchAudioFeatures","then","features","svg","window","appendChild","getBlob","getElementsByTagName","length","track","preview_url","key","className","onDragStart","e","draggable","onContextMenu","openTooltip","src","muted","loop","name","href","external_urls","spotify","ev","console","log","dataTransfer","setData","JSON","stringify","effectAllowed","getElementsByClassName","tooltip","currentClass","classList","remove","add","computeAdditionTimestamp","searchPlaylist","retrieve","data","items","audio_features","query","type","payload","apiConfig","encodedPayload","Buffer","toString","access_token","myHeaders","Headers","append","urlencoded","URLSearchParams","token","fetch","method","headers","redirect","response","json","catch","error","a","result","fetchString","playlist","getSong","playlistENDPOINT","audioENDPOINT","clientID","secretID","addSong","removeSong","setCurrentPlaylist","loadPlaylist","muteAudio","bool","hideNavbar","promise","hyperscript","node","this","cancelCallback","doCancel","ReactDOM","createSpinner","errorSpan","message","height","alt","NavbarPresentational","homepageControl","nav","playlistControl","handleClick","onDrop","openNav","onDragOver","playlistAction","playlistMessage","dropEvent","dragOverEvent","onClick","audioMuted","connect","state","ownProps","currentPlaylist","navbarHidden","dispatch","history","push","firstChild","removeChild","muteButton","querySelector","audioElements","Object","keys","i","navbarDiv","getData","parse","miniPreview","rootCopy","cloneNode","setAttribute","addEventListener","children","currChild","getAttribute","style","width","preventDefault","SearchPresentational","whenDone","onResultsClick","onAdd","onLoadPlaylist","useEffect","event","target","clickedNode","loadedSongs","clickOnSong","contains","clickOnAddButton","childNodes","button","clickedSongId","parentNode","find","d","idPlaylist","PlaylistPresentational","onDelete","displaySong","doneCallback","doneMessage","App","exact","path","to","component","Search","Playlist","Navbar","action","alreadyPresent","some","alert","addTime","filter","combineReducers","persistedState","localStorage","getItem","store","createStore","rootReducer","subscribe","setItem","getState","SettingsPresentational","htmlFor","onChange","class","data-key","data-note"],"mappings":"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","file":"static/js/main.6d52fb86.chunk.js","sourcesContent":["import * as apiConfig from './apiConfig.js'\nimport RenderPromise from './renderPromise.js'\nimport React from 'react'\nimport Settings from './components/Settings/SettingsContainer'\n\n\n\n  export function displaySongs(songListPromise) {\n    RenderPromise.render(\n      songListPromise,\n      songs => React.createElement(React.Fragment, {}, songs.map(song => createSongDisplay(song))),\n      document.getElementById('resultsDiv'));\n\n      setTimeout(() => {\n        let songs = document.body.querySelectorAll('.song');\n        songs.forEach(song => {\n          let root = document.getElementById(song.id);\n          searchAudioFeatures(song.id).then(features => {\n            var svg = window[\"blobCreator\"](features);\n            root.appendChild(svg);\n          });\n        });\n      }, 1000);\n  }\n\n  export function getBlob(id, root) {\n    setTimeout(() => {\n      let root = document.getElementById(id);\n      if (root == null || root.getElementsByTagName('svg').length) {\n        return;\n      }\n      searchAudioFeatures(id).then(features => {\n        var svg = window[\"blobCreator\"](features);\n        root.appendChild(svg);\n      });\n    }, 1000);\n  }\n\n  /*\n    Give drag drop element to this.\n  */\n  export function createSongDisplay(song) {\n    if (song.track.preview_url !== null){\n    return (\n      <div id={song.track.id} key={song.track.id} className='song draggable songtooltip'\n            onDragStart={(e)=>onDragStart(e, song)} draggable onContextMenu={(e)=>openTooltip(song.track.id)}>\n        <audio id={'audio'+song.track.id} src={song.track.preview_url} muted loop></audio>\n        <div id={\"tooltip-\"+song.track.id} className=\"tooltiptext hidden\"><h3>{song.track.name}</h3><br/>\n        <a href={song.track.external_urls.spotify}>Open in spotify</a>\n        \n        </div>\n      \n        {/* <button className='addButton buttonInvisible'>Add to playlist</button><br/> */}\n        <br/>\n      </div>\n    );\n    }\n  }\n  const onDragStart = (ev, song) => {\n    console.log(\"Song \" + song.track.name + \" is being dragged\");\n    ev.dataTransfer.setData(\"text/plain\", JSON.stringify(song));\n    //Want to transfer the html element being dragged\n    //let root = document.getElementById(song.track.id);\n    //If the element has an svg child => the blob\n    // if(root.getElementsByTagName('svg').length) {\n    //   ev.dataTransfer.setData(\"text/html\", root);\n    // }\n    ev.dataTransfer.effectAllowed = \"copy\";\n  }\n  const openTooltip = (id) => {\n    console.log(\"open toolkit\")\n    var visibleTooltips = document.getElementsByClassName(\"tooltiptext visible\");\n    \n      // for (var i = 0, len = visibleTooltips.length; i < len; i++) {\n      //   console.log(visibleTooltips[i])\n      //   visibleTooltips[i].classList.add('hidden');\n      //   visibleTooltips[i].classList.remove('visible');\n      //   }\n    \n\n    // var visibleTooltips = document.getElementsByClassName(\"tooltiptext visible\");\n    // visibleTooltips.classList.add('hidden');\n    // visibleTooltips.classList.remove('visible');\n    \n    var tooltip = document.getElementById(\"tooltip-\"+id);\n    let currentClass = tooltip.classList[1];\n    tooltip.classList.remove(currentClass);\n    tooltip.classList.add((currentClass == 'hidden'? 'visible' : 'hidden'));\n  }\n  export function getSongDetails(song_id) {\n    //TODO return acoustic features of song\n  }\n\n  export function computeAdditionTimestamp(song) {\n    //return current time\n  }\n\n  export function searchPlaylist(name) {\n    // Replace variables in case they are falsy (e.g. empty string, null, undefined)\n    name = name || \"37i9dQZEVXbMDoHDwVN2tF\";\n\n    return retrieve(name, 'playlist').then(data => data.items); // leave out the unimportant parts of the response data\n  }\n\n  export function searchAudioFeatures(id) {\n    // Replace variables in case they are falsy (e.g. empty string, null, undefined)\n    id = id || \"\";\n\n    return retrieve('?ids='+id, 'audio').then(data => data.audio_features[0]);\n  }\n\n  export function retrieve(query, type) {\n    const payload = apiConfig.clientID+\":\"+apiConfig.secretID;\n    const encodedPayload = new Buffer(payload).toString(\"base64\");\n\n    let access_token = \"\";\n\n    const myHeaders = new Headers();\n    myHeaders.append(\"Authorization\", \"Basic \" + encodedPayload);\n    const urlencoded = new URLSearchParams();\n    urlencoded.append(\"grant_type\", \"client_credentials\");\n    const requestOptions = {\n      method: 'POST',\n      headers: myHeaders,\n      body: urlencoded,\n      redirect: 'follow'\n    };\n    const token = fetch(\"https://accounts.spotify.com/api/token\", requestOptions)\n    .then(response => response.json())\n    .catch(error => console.log('error', error));\n\n    async function getSong(type) {\n      let wait = await token.then(result => access_token = result.access_token);\n      let fetchString = (type == 'playlist') ?\n        apiConfig.playlistENDPOINT + query + '/tracks' :\n        apiConfig.audioENDPOINT + query;\n\n      let playlist = fetch(fetchString, {\n        method: 'GET',\n        headers: {\n          'Accept': 'application/json',\n          'Content-Type': 'application/json',\n          'Authorization': 'Bearer ' + access_token\n        }\n      }).then(response => {\n        return response.json();\n      });\n\n      return playlist;\n    }\n\n    return getSong(type);\n  }\n","export const tokenENDPOINT= \"https://accounts.spotify.com/api/token\";\nexport const playlistENDPOINT = \"https://api.spotify.com/v1/playlists/\"\nexport const audioENDPOINT = \"https://api.spotify.com/v1/audio-features/\"\n\nexport const clientID = \"440325bb5cab47af9d5f1af2cad762fa\";\nexport const secretID = \"c5bf0b3bd0ca4d4eac5b684505d7665d\";","export const addSong = song => ({\n  type: 'ADD_SONG',\n  song\n})\n\nexport const removeSong = song => ({\n  type: 'REMOVE_SONG',\n  song\n})\n\nexport const setCurrentPlaylist = songs => ({\n  type: 'SET_PLAYLIST', \n  songs\n})\n\nexport const loadPlaylist = id => ({\n  type: 'LOAD_PLAYLIST',\n  id\n})\n\nexport const muteAudio = bool =>({\n  type: 'MUTE_AUDIO',\n  bool\n})\n\nexport const hideNavbar = bool =>({\n  type: 'HIDE_NAVBAR',\n  bool\n})","import React from 'react'\nimport ReactDOM from 'react-dom'\n\nclass RenderPromise {\n\n  static render(promise, hyperscript, node) {\n    if (this.cancelCallback) this.cancelCallback();\n  \tlet doCancel = false;\n\n  \tReactDOM.render(this.createSpinner(), node);\n\n  \tpromise.then(result => {\n  \t\t\tif (doCancel) return;\n        ReactDOM.render(hyperscript(result), node);\n  \t\t})\n  \t  .catch(error => {\n  \t\t\tif (doCancel) return;\n  \t\t\tconst errorSpan = (<span>{error.message}</span>);\n        ReactDOM.render(errorSpan, node);\n  \t\t})\n\n  \t\tthis.cancelCallback = () => {doCancel = true;};\n  }\n\n  static createSpinner() {\n  \treturn React.createElement(\"div\", {className: \"spinnerClass\"},\n            React.createElement(\"img\", {height: 100,  alt: \"\", src: \"http://cdn.lowgif.com/full/d9675675623d5f27-loading-gif-transparent-background-loading-gif.gif\"}));\n  }\n\n}\n\nexport default RenderPromise;\n","import React from 'react'\n\nconst NavbarPresentational = ({songs, muted, nav,  homepageControl, playlistControl, handleClick, openNav, onDrop, onDragOver}) => {\n  const [homepageAction, homepageMessage] = homepageControl;\n  const [playlistAction, playlistMessage] = playlistControl;\n  const nSongs = songs.length;\n  const dropEvent = onDrop;\n  const dragOverEvent = onDragOver;\n\n\n  return (\n    <div id=\"navbar\" className=\"navbar debug nothidden\">\n\n      {/* <h1 id=\"menu-title\" onClick={() => openNav(nav.navbarHidden)}>blobify</h1> */}\n      <h1 id=\"menu-title\">blobify.</h1>\n\n      <div className=\"navbarContent\">\n\n        <div className=\"navbarContent-playlist\">\n          {/* <button onClick={() => homepageAction()}>{homepageMessage}</button> */}\n          <br/>\n          <h2 id=\"content-title\">Pick playlist</h2>\n          <h4 id=\"content-title\">Switch playlist to <span className=\"tooltip\">blobify songs\n          <span className=\"tooltiptext\">What you see here is not random colors and shapes. <br/><br/>\n                                    Songs contain data. <br/> <br/>\n                                    A blob is a visual representation of a songs data, more so its energy and key. <br/><br/>\n                                    The level of energy determines its shape, key its color and the dots... - we call it blobify. </span>\n          </span></h4>\n     \n          <div className=\"playlist\"></div>\n          <h5 id=\"content-title\">Fetched from Spotify</h5>\n\n        </div>\n\n        <div className=\"navbarContent-save droppable drophere\"\n          onDragOver={dragOverEvent}\n          onDrop={dropEvent}>\n          <h2 id=\"content-title\">Save songs</h2>\n          <h4 id=\"content-title\">Drag and drop blobs here to add songs to your collection.</h4>\n\n          {/* <div className=\"playlist\"></div> */}\n          <div className=\"collection\">\n            <div id=\"miniPreview\" className=\"miniPreviewScroll\"></div>\n\n            {/*<div className=\"drophere playlistCss droppable\"\n                    onDragOver={dragOverEvent}\n                    onDrop={dropEvent}><br/></div>*/}\n\n            {\n              /* <button className=\"playlistCss droppable\"\n                    onClick={() => playlistAction()}\n                    onDragOver={dragOverEvent}\n                    onDrop={dropEvent}>\n                    {playlistMessage}\n            </button><br/> */}\n\n            <button id=\"collection-button\" onClick={() => playlistAction()}>{playlistMessage}</button>\n          </div>\n        </div>\n      </div>\n\n      <div className='muteButton mute' onClick={() => handleClick(muted.audioMuted)}></div>\n    </div>\n  )\n}\n\nexport default NavbarPresentational\n","import { connect } from 'react-redux'\nimport NavbarPresentational from './NavbarPresentational'\nimport { hideNavbar } from '../../actions'\nimport { muteAudio, addSong, removeSong } from '../../actions'\n\nconst mapStateToProps = (state, ownProps) => {\n  return {\n    songs: state.currentPlaylist,\n    muted: state.audioMuted,\n    nav: state.navbarHidden\n  };\n};\n\nconst mapDispatchToProps = (dispatch, ownProps) => ({\n  homepageControl: [() => ownProps.history.push(\"/trending\"), \"Back to the trending songs\"],\n  playlistControl: [\n    () => {let root = document.getElementById(\"miniPreview\");\n          while(root.firstChild) {root.removeChild(root.firstChild)};\n          ownProps.history.push(\"/myplaylist\")},\"Export to Spotify\"],\n  handleClick: (muted) => {\n    dispatch(muteAudio(muted));\n\n    let muteButton = document.body.querySelector('.muteButton');\n    let currentClass = muteButton.classList[1];\n    muteButton.classList.remove(currentClass);\n    muteButton.classList.add((currentClass == 'mute'? 'unmute' : 'mute'));\n\n    let audioElements = document.getElementsByTagName(\"audio\");\n    Object.keys(audioElements).map((i) =>\n      audioElements[i].muted = muted)\n\n  },\n  openNav: (nav) => {\n    dispatch(hideNavbar(nav));\n\n    var navbarDiv = document.getElementById(\"navbar\");\n    let currentClass = navbarDiv.classList[2];\n\n    navbarDiv.classList.remove(currentClass);\n    navbarDiv.classList.add((currentClass == 'hidden'? 'nothidden' : 'hidden'));\n  },\n\n  onDrop: (ev) => {\n    console.log(\"Dropped into playlist\");\n    let song = ev.dataTransfer.getData(\"text/plain\");\n    //console.log(JSON.parse(song));\n    dispatch(addSong(JSON.parse(song)));\n    //If song is already in playlist then don't put it in here.\n    let miniPreview = document.getElementById(\"miniPreview\");\n    let root = document.getElementById(JSON.parse(song).track.id); //The original large blob\n    let rootCopy = document.getElementById(JSON.parse(song).track.id).cloneNode(true); //this is the mini blob\n\n    //Change the svg/blob dimensions.\n    rootCopy.getElementsByTagName('g')[0].setAttribute(\"transform\", \"matrix(1 0 0 1 0 -10) scale(0.2)\");\n    rootCopy.getElementsByTagName('svg')[0].setAttribute(\"height\", \"50\");\n    rootCopy.getElementsByTagName('svg')[0].setAttribute(\"width\", \"50\");\n    //rootCopy.removeAttribute(\"class\");\n    //rootCopy.addAttribute(\"class\", \"miniBlob\");\n    //Add a button event to miniBlob that removes the song from playlist and makes large blob visible.\n    rootCopy.addEventListener('click', function(ev){\n      dispatch(removeSong(JSON.parse(song)));\n      var children = miniPreview.children;\n      for(var i = 0; i < children.length; i++) {\n        var currChild = children[i];\n        if(currChild.getAttribute(\"id\") == JSON.parse(song).track.id) {\n          miniPreview.removeChild(currChild);\n          break;\n        }\n      }\n      //Make root element visible.\n      root.getElementsByTagName('svg')[0].setAttribute(\"opacity\", \"1.0\");\n    });\n    rootCopy.style.height = \"70px\";\n    rootCopy.style.width = \"60px\";\n\n    miniPreview.appendChild(rootCopy);\n    //Lower the div oppacity to show it's been added.\n    root.getElementsByTagName('svg')[0].setAttribute(\"opacity\", \"0.2\");\n  },\n  onDragOver: (ev) => {\n    ev.preventDefault()\n  }\n})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(NavbarPresentational);\n","import React, { useRef, useEffect } from 'react'\n\nconst SearchPresentational = ({ songs, whenDone, onResultsClick, onAdd, onLoadPlaylist }) => {\n  const [doneCallback, doneMessage] = whenDone;\n  const [addCallback, addMessage] = onAdd;\n\n  useEffect(() => {\n    onLoadPlaylist('37i9dQZEVXbMDoHDwVN2tF')\n  }, []);\n\n  return (\n    <div id=\"search\" className=\"mainContent debug\">\n      <div id=\"resultsDiv\" onClick={event => onResultsClick(event.target, songs)}></div>\n      {/* <button className=\"nav\" onClick={() => doneCallback()}>{doneMessage}</button> */}\n    </div>\n  )\n}\n\nexport default SearchPresentational\n","import SearchPresentational from './SearchPresentational'\nimport { connect } from 'react-redux'\nimport { addSong, setCurrentPlaylist, loadPlaylist } from '../../actions'\nimport { searchPlaylist } from '../../PlaylistModel'\n\nconst mapStateToProps = (state) => {\n  return { songs: state.currentPlaylist }\n};\n\nconst mapDispatchToProps = (dispatch, ownProps) => ({\n  whenDone: [() => ownProps.history.push(\"/myplaylist\"), \"Go to My Playlist\"],\n  onResultsClick: (clickedNode, loadedSongs) => {\n        var clickOnSong = clickedNode.classList.contains(\"song\");\n        var clickOnAddButton = clickedNode.classList.contains(\"addButton\");\n        if (clickOnSong) {\n          const song_id = clickedNode.id;\n          //console.log(\"Song clicked: \" + song_id);\n\n          clickedNode.childNodes[1].classList.remove('buttonInvisible');\n          document.querySelectorAll('.buttonVisible').forEach(button => {\n            button.classList.remove('buttonVisible');\n            button.classList.add('buttonInvisible');\n          });\n          clickedNode.firstChild.classList.add('buttonVisible');\n        }\n\n        if (clickOnAddButton) {\n          //console.log(clickedNode.parentNode.id);\n          let clickedSongId = clickedNode.parentNode.id;\n          let song = loadedSongs.find(d => d.track.id == clickedSongId);\n          //console.log({song});\n          dispatch(addSong(song));\n        }\n    },\n  onAdd: [(song) => dispatch(addSong(song)), \"Add to the playlist\"],\n  onLoadPlaylist: (idPlaylist) => {\n    searchPlaylist(idPlaylist).then(data => dispatch(setCurrentPlaylist(data)));\n    dispatch(loadPlaylist(idPlaylist));\n  }\n})\n\n\nexport default connect(mapStateToProps, mapDispatchToProps)(SearchPresentational);\n","import React from 'react'\n\nconst PlaylistPresentational = ({ songs, whenDone, onDelete, displaySong, getBlob}) => {\n    const [doneCallback, doneMessage] = whenDone;\n    return (\n      <div id=\"summary\" className=\"mainContent debug\">\n        <div>Current playlist:\n          <table>\n            <thead>\n              <tr>\n                <th>Song</th>\n                <th>Genre</th>\n                <th>Release date</th>\n              </tr>\n            </thead>\n            <tbody>\n              {songs.map((song, i) =>\n                <tr key={i}>\n                  <td id=\"blob\">{getBlob(song.track.id)}</td>\n                  <td>{displaySong(song)}</td>\n                  <td>{song.track.name}</td>\n                  <td><button onClick={() => onDelete(song)}>Delete from playlist</button></td>\n                </tr>\n              )}\n            </tbody>\n            <tfoot>\n              <tr><td>TOTAL SONGS</td><td></td><td>{songs.length}</td></tr>\n            </tfoot>\n          </table>\n        </div>\n        <div>\n          <button className=\"nav\" onClick={() => doneCallback()}>{doneMessage}</button>\n        </div>\n      </div>\n    )\n\n}\n\nexport default PlaylistPresentational\n","import { connect } from 'react-redux'\nimport PlaylistPresentational from './PlaylistPresentational'\nimport { removeSong } from '../../actions'\nimport { createSongDisplay, getBlob } from '../../PlaylistModel.js'\n\nconst mapStateToProps = (state) => {\n  return { songs: state.songs };\n};\n\nconst mapDispatchToProps = (dispatch, ownProps) => ({\n  whenDone: [() => ownProps.history.push(\"/trending\"), \"Back to the trending songs\"],\n  onDelete: song => dispatch(removeSong(song)),\n  displaySong: song => createSongDisplay(song),\n  getBlob: (id) => getBlob(id)\n  /*call: getBlobs()*/\n})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(PlaylistPresentational);\n","import React from 'react'\nimport { BrowserRouter as Router, Route, Redirect, Switch } from 'react-router-dom'\nimport Navbar from './Navbar/NavbarContainer'\nimport '../style.css'\nimport Search from './Search/SearchContainer'\nimport Playlist from './Playlist/PlaylistContainer'\n\nconst App = () => (\n    <Router>\n      <div className=\"flexParent\">\n        <Switch>\n          <Route exact path=\"/\" render={() => <Redirect to=\"/trending\" />} />\n        </Switch>\n        \n        <Route path=\"/trending\" component={Search}></Route>\n        <Route path=\"/myplaylist\" component={Playlist}></Route>\n        <Route component={Navbar}></Route>\n      </div>\n  </Router>\n)\n\nexport default App\n","import { computeAdditionTimestamp } from '../PlaylistModel.js'\n\nfunction songs(state = [], action) {\n  let song = action.song;\n  switch (action.type) {\n    case 'ADD_SONG':\n      // Check if song is already in the playlist\n      console.log(state);\n      let alreadyPresent = state.some(d => d.track.id === song.track.id);\n      if (alreadyPresent) {\n        window.alert(`${song.track.name} is already present in the playlist.`);\n        return [...state];\n      } else {\n        // Compute time of addition\n        song.addTime = computeAdditionTimestamp(song);\n        return [...state, song];\n      }\n    case 'REMOVE_SONG':\n      return [...state].filter(d => d.track.id !== song.track.id);\n    default:\n      return [...state];\n  }\n}\n\nexport default songs\n","import {searchPlaylist, displaySongs} from '../PlaylistModel.js'\n\nconst currentPlaylist = (state = {}, action) => {\n  switch (action.type) {\n    case 'SET_PLAYLIST':\n      return action.songs;\n    case 'LOAD_PLAYLIST':\n      displaySongs(searchPlaylist(action.id)); //searchPlaylist() is a promise!\n      return state;\n    default:\n      return state;\n  }\n}\n\nexport default currentPlaylist\n","const audioMuted = (state = {}, action) => {\n  switch (action.type) {\n    case 'MUTE_AUDIO':\n      state.audioMuted = !action.bool;\n      return state;\n    default:\n      return state;\n  }\n}\n\nexport default audioMuted","const navbarHidden = (state = {}, action) => {\n  switch (action.type) {\n    case 'HIDE_NAVBAR':\n      state.navbarHidden = !action.bool;\n      return state;\n    default:\n      return state;\n  }\n}\n\nexport default navbarHidden","import { combineReducers } from 'redux'\nimport songs from './songs'\nimport currentPlaylist from './currentPlaylist'\nimport audioMuted from './audioMuted'\nimport navbarHidden from './navbarHidden'\n\nexport default combineReducers({\n  songs,\n  currentPlaylist,\n  audioMuted,\n  navbarHidden\n})\n","import React from 'react'\nimport { render } from 'react-dom'\nimport { createStore } from 'redux'\nimport { Provider } from 'react-redux'\nimport App from './components/App'\nimport rootReducer from './reducers'\nimport './style.css'\n\n// Retrieve saved model\nconst persistedState = localStorage.getItem('reduxState') ? JSON.parse(localStorage.getItem('reduxState')) : {};\nconst store = createStore(rootReducer, persistedState);\n// Update stored state when model changes\nstore.subscribe(() =>\n  localStorage.setItem('reduxState', JSON.stringify(store.getState()))\n);\n\nrender(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n)\n","import React from 'react'\n\nconst SettingsPresentational = ({songs, nav,  homepageControl, playlistControl, openNav}) => {\n  const [homepageAction, homepageMessage] = homepageControl;\n  const [playlistAction, playlistMessage] = playlistControl;\n  const nSongs = songs.length;\n\n  return (\n    <div>\n      <button id=\"settings-button\" onClick={() => openNav(nav.navbarHidden)}>Settings</button><br/>\n      \n      <div id=\"settings\" className=\"settings debug hidden\">\n    \n       \n       \n        <label htmlFor=\"favcolor\">Select your favorite color:</label>\n        <input type=\"color\" id=\"favcolor\" name=\"favcolor\" onChange={() => console.log(\"change\",this)}/>\n       \n         <h3 class=\"tooltip\">blobify songs\n          <span class=\"tooltiptext\">What you see here is not random colors and shapes. <br/><br/>\n                                    Each song contains data. <br/> <br/>\n                                    A blob is a visual representation of that song and it's data. <br/><br/>\n                                    The level of energy determines it's shape, key for color and the dots... - we call it blobify. </span>\n          </h3>\n\n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n        <div className=\"keys\">\n        <div data-key=\"0\" className=\"key\" data-note=\"C\">\n            <span className=\"hints\">C</span>\n        </div>\n        <div data-key=\"1\" className=\"key sharp\" data-note=\"C#\">\n            <span className=\"hints\">C#</span>\n        </div>\n        <div data-key=\"2\" className=\"key\" data-note=\"D\">\n            <span className=\"hints\">D</span>\n        </div>\n        <div data-key=\"3\" className=\"key sharp\" data-note=\"D#\">\n            <span className=\"hints\">D#</span>\n        </div>\n        <div data-key=\"4\" className=\"key\" data-note=\"E\">\n            <span className=\"hints\">E</span>\n        </div>\n        <div data-key=\"5\" className=\"key\" data-note=\"F\">\n            <span className=\"hints\">F</span>\n        </div>\n        <div data-key=\"6\" className=\"key sharp\" data-note=\"F#\">\n            <span className=\"hints\">F#</span>\n        </div>\n        <div data-key=\"7\" className=\"key\" data-note=\"G\">\n            <span className=\"hints\">G</span>\n        </div>\n        <div data-key=\"8\" className=\"key sharp\" data-note=\"G#\">\n            <span className=\"hints\">G#</span>\n        </div>\n        <div data-key=\"9\" className=\"key\" data-note=\"A\">\n            <span className=\"hints\">A</span>\n        </div>\n        <div data-key=\"10\" className=\"key sharp\" data-note=\"A#\">\n            <span className=\"hints\">A#</span>\n        </div>\n        <div data-key=\"11\" className=\"key\" data-note=\"B\">\n            <span className=\"hints\">B</span>\n        </div>\n\n      </div>\n\n     </div>\n         \n      \n    </div>\n  )\n}\n\nexport default SettingsPresentational\n","import { connect } from 'react-redux'\nimport SettingsPresentational from './SettingsPresentational'\nimport { hideNavbar } from '../../actions'\n\nconst mapStateToProps = (state, ownProps) => {\n  return {\n    songs: state.currentPlaylist,\n    muted: state.audioMuted,\n    nav: state.navbarHidden\n  };\n};\n\nconst mapDispatchToProps = (dispatch, ownProps) => ({\n  homepageControl: [() => ownProps.history.push(\"/trending\"), \"Back to the trending songs\"],\n  playlistControl: [() => ownProps.history.push(\"/myplaylist\"), \"My playlist\"],\n  \n  openNav: (nav) => {\n    dispatch(hideNavbar(nav));\n\n    var navbarDiv = document.getElementById(\"settings\");\n    let currentClass = navbarDiv.classList[2];\n\n    navbarDiv.classList.remove(currentClass);\n    navbarDiv.classList.add((currentClass == 'hidden'? 'nothidden' : 'hidden'));\n  }\n\n  \n})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(SettingsPresentational);\n"],"sourceRoot":""}