{"version":3,"sources":["PlaylistModel.js","apiConfig.js","renderPromise.js","components/Navbar/NavbarPresentational.js","actions/index.js","components/Navbar/NavbarContainer.js","components/Search/SearchPresentational.js","components/Search/SearchContainer.js","components/Playlist/PlaylistPresentational.js","components/Playlist/PlaylistContainer.js","components/App.js","reducers/songs.js","reducers/currentPlaylist.js","reducers/audioMuted.js","reducers/navbarHidden.js","reducers/index.js","index.js"],"names":["firebase","require","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","firestore","displaySongs","songListPromise","RenderPromise","render","songs","React","createElement","Fragment","map","song","createSongDisplay","document","getElementById","setTimeout","body","querySelectorAll","forEach","root","id","searchAudioFeatures","then","features","childNodes","remove","svg","window","appendChild","key","energy","getBlob","scale","getElementsByTagName","length","track","console","log","preview_url","className","onDragStart","e","draggable","onContextMenu","openTooltip","src","muted","loop","name","artists","artist","href","external_urls","spotify","target","rel","alt","height","width","ev","dataTransfer","setData","JSON","stringify","effectAllowed","getElementsByClassName","tooltip","currentClass","classList","add","searchPlaylist","retrieve","data","items","audio_features","query","type","payload","apiConfig","encodedPayload","Buffer","toString","access_token","myHeaders","Headers","append","urlencoded","URLSearchParams","token","fetch","method","headers","redirect","response","json","catch","error","a","result","fetchString","playlist","getSong","playlistENDPOINT","audioENDPOINT","clientID","secretID","promise","hyperscript","node","this","cancelCallback","doCancel","ReactDOM","createSpinner","errorSpan","message","NavbarPresentational","homepageControl","nav","playlistControl","handleClick","onDrop","openNav","onDragOver","selectPlaylist","playlistAction","playlistMessage","dropEvent","dragOverEvent","onClick","audioMuted","addSong","removeSong","setCurrentPlaylist","loadPlaylist","connect","state","ownProps","currentPlaylist","navbarHidden","dispatch","history","push","firstChild","removeChild","bool","muteButton","querySelector","audioElements","Object","keys","i","navbarDiv","getData","parse","miniPreview","rootCopy","cloneNode","setAttribute","addEventListener","children","currChild","getAttribute","style","preventDefault","playlistID","button","SearchPresentational","whenDone","onResultsClick","onAdd","onLoadPlaylist","useEffect","event","clickedNode","loadedSongs","clickOnSong","contains","clickOnAddButton","clickedSongId","parentNode","find","d","idPlaylist","PlaylistPresentational","onDelete","displaySong","doneCallback","App","exact","path","to","component","Search","Playlist","Navbar","action","alreadyPresent","some","alert","filter","combineReducers","persistedState","localStorage","getItem","store","createStore","rootReducer","subscribe","setItem","getState"],"mappings":"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","file":"static/js/main.0617a83d.chunk.js","sourcesContent":["import * as apiConfig from './apiConfig.js'\nimport RenderPromise from './renderPromise.js'\nimport React from 'react'\n\nconst firebase = require(\"firebase\");\n// Required for side-effects\nrequire(\"firebase/firestore\");\n\n// Your web app's Firebase configuration\nvar firebaseConfig = {\n  apiKey: \"AIzaSyAPO4fSzO6KUyphdBvNLHr0UMr7ArpPVK4\",\n  authDomain: \"iprog2020.firebaseapp.com\",\n  databaseURL: \"https://iprog2020.firebaseio.com\",\n  projectId: \"iprog2020\",\n  storageBucket: \"iprog2020.appspot.com\",\n  messagingSenderId: \"667835768822\",\n  appId: \"1:667835768822:web:407e0382496fd8a7f731d7\"\n};\n\n// Initialize Firebase\nfirebase.initializeApp(firebaseConfig);\nvar db = firebase.firestore();\n\nexport function displaySongs(songListPromise) {\n  RenderPromise.render(\n    songListPromise,\n    songs => React.createElement(React.Fragment, {}, songs.map(song => createSongDisplay(song))),\n    document.getElementById('resultsDiv'));\n\n    //features=> React.createElement(React.Fragment, {}, features.map(feature => createSongDisplay(feature))),\n    //document.getElementById('tooltip-\"+id'));\n\n    setTimeout(() => {\n      let songs = document.body.querySelectorAll('.song');\n      songs.forEach(song => {\n        let root = document.getElementById(song.id);\n        searchAudioFeatures(song.id).then(features => {\n          root.childNodes[2].remove(root.childNodes['img']);\n          var svg = window[\"blobCreator\"](features,1);\n          root.appendChild(svg);\n          var key = features.key;\n          var energy = features.energy;\n        });\n      });\n    }, 1000);\n}\n\n// console.log(songObj)\n\nexport function getBlob(id, scale, root) {\n  setTimeout(() => {\n    let root = document.getElementById(id);\n    if (root === null || root.getElementsByTagName('svg').length) {\n      return;\n    }\n    searchAudioFeatures(id).then(features => {\n      root.childNodes[2].remove(root.childNodes['img']);\n      var svg = window[\"blobCreator\"](features, scale);\n      root.appendChild(svg);\n      \n    });\n\n  }, 1000);\n\n}\n\n\n/*\n  Give drag drop element to this.\n*/\nexport function createSongDisplay(song) {\n  searchAudioFeatures(song.track.id).then(features => {\n    console.log('Song features', {features}); //you should be able to see all the song's features\n\n    //change the content of the (initially empty) h4's\n    //document.querySelector('.energyH').innerHTML = 'Energy: ' + features.energy + '- thereby dots, shape';\n    //document.querySelector('.keyH').innerHTML = 'Key: ' + features.key + '- thereby color';\n\n    //TODO: continue\n  });\n\n  if (song.track.preview_url !== null){\n    return (\n      <div id={song.track.id} key={song.track.id} className='song draggable songtooltip'\n            onDragStart={(e)=>onDragStart(e, song)} draggable onContextMenu={(e)=>openTooltip(song.track.id)}>\n        <audio id={'audio'+song.track.id} src={song.track.preview_url} muted loop></audio>\n        <div id={\"tooltip-\"+song.track.id} className=\"tooltiptext hidden\">\n\n\n          <h3>{song.track.name}</h3>\n          <h4>{song.track.artists.map(artist => {return artist.name})}</h4>\n          <br/>\n\n          <a href={song.track.external_urls.spotify} target=\"_blank\" rel=\"noopener noreferrer\">Open in Spotify</a> <br/>\n\n          <h4 className={\"energyH\"}></h4>\n          <h4 className={\"keyH\"}></h4>\n\n          <br/>\n          \n        </div>\n        {/* <button className='addButton buttonInvisible'>Add to playlist</button><br/> */}\n        <img className='loadingBlobs' src=\"blurryblobBW.svg\"  alt=\"blobyfied song\" height='300' width='300'/>\n        <br/>\n      </div>\n    );\n  }\n}\nconst onDragStart = (ev, song) => {\n  console.log(\"Song \" + song.track.name + \" is being dragged\");\n  ev.dataTransfer.setData(\"text/plain\", JSON.stringify(song));\n  //Want to transfer the html element being dragged\n  //let root = document.getElementById(song.track.id);\n  //If the element has an svg child => the blob\n  // if(root.getElementsByTagName('svg').length) {\n  //   ev.dataTransfer.setData(\"text/html\", root);\n  // }\n  ev.dataTransfer.effectAllowed = \"copy\";\n}\nconst openTooltip = (id) => {\n  console.log(\"open tooltip\")\n  var visibleTooltips = document.getElementsByClassName(\"tooltiptext visible\");\n  \n    // for (var i = 0, len = visibleTooltips.length; i < len; i++) {\n    //   console.log(visibleTooltips[i])\n    //   visibleTooltips[i].classList.add('hidden');\n    //   visibleTooltips[i].classList.remove('visible');\n    //   }\n\n  // var visibleTooltips = document.getElementsByClassName(\"tooltiptext visible\");\n  // visibleTooltips.classList.add('hidden');\n  // visibleTooltips.classList.remove('visible');\n  \n  var tooltip = document.getElementById(\"tooltip-\"+id);\n  let currentClass = tooltip.classList[1];\n  tooltip.classList.remove(currentClass);\n  tooltip.classList.add((currentClass === 'hidden'? 'visible' : 'hidden'));\n}\n\nexport function searchPlaylist(name) {\n  // Replace variables in case they are falsy (e.g. empty string, null, undefined)\n  name = name || \"37i9dQZEVXbMDoHDwVN2tF\";\n\n  return retrieve(name, 'playlist').then(data => data.items); // leave out the unimportant parts of the response data\n}\n\nexport function searchAudioFeatures(id) {\n  // Replace variables in case they are falsy (e.g. empty string, null, undefined)\n  id = id || \"\";\n\n  return retrieve('?ids='+id, 'audio').then(data => data.audio_features[0]);\n}\n\n\nexport function retrieve(query, type) {\n  const payload = apiConfig.clientID+\":\"+apiConfig.secretID;\n  const encodedPayload = new Buffer(payload).toString(\"base64\");\n\n  let access_token = \"\";\n\n  const myHeaders = new Headers();\n  myHeaders.append(\"Authorization\", \"Basic \" + encodedPayload);\n  const urlencoded = new URLSearchParams();\n  urlencoded.append(\"grant_type\", \"client_credentials\");\n  const requestOptions = {\n    method: 'POST',\n    headers: myHeaders,\n    body: urlencoded,\n    redirect: 'follow'\n  };\n  const token = fetch(\"https://accounts.spotify.com/api/token\", requestOptions)\n  .then(response => response.json())\n  .catch(error => console.log('error', error));\n\n  async function getSong(type) {\n    let wait = await token.then(result => access_token = result.access_token);\n    let fetchString = (type === 'playlist') ?\n      apiConfig.playlistENDPOINT + query + '/tracks' :\n      apiConfig.audioENDPOINT + query;\n\n    let playlist = fetch(fetchString, {\n      method: 'GET',\n      headers: {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json',\n        'Authorization': 'Bearer ' + access_token\n      }\n    }).then(response => {\n      return response.json();\n    });\n\n    return playlist;\n  }\n\n  return getSong(type);\n}\n\n// Saves a new song to your Cloud Firestore database.\nexport function saveSong(song) {\n  // Add a new song object to the database.\n  db.collection('playlist').doc(song.track.id).set({\n    id: song.track.id,\n    title: song.track.name,\n    preview: song.track.preview_url,\n    timestamp: firebase.firestore.FieldValue.serverTimestamp()\n  })\n  .catch(function(error) {\n    console.error('Error writing new message to database', error);\n  });\n  \n}\n\n// Loads a specific song from a firestore collection\nexport function loadSong(song) {\n  db.collection('playlist').doc(song.track.id).get().then(function(doc) {\n    console.log(`${doc.id} => ${doc.data().title}`);\n  });\n}\n\n// Deletes a specific song from a firestore collection\nexport function deleteSong(id) {\n  db.collection(\"playlist\").doc(id).delete().then(function() {\n    console.log(\"Document successfully deleted!\");\n  }).catch(function(error) {\n      console.error(\"Error removing document: \", error);\n  });\n}\n\n// Loads the content of an entire database collection\nexport function loadCollection() {\n  return db.collection(\"playlist\").get().then((querySnapshot) => {\n    let collection = [];\n    querySnapshot.forEach((doc, i) => {\n      let data = doc.data();  \n        console.log(`${doc.id} => ${doc.data()}`);\n        collection.push(doc.data());\n    });\n    console.log({collection});\n    return collection;\n  });\n}\n","export const tokenENDPOINT= \"https://accounts.spotify.com/api/token\";\r\nexport const playlistENDPOINT = \"https://api.spotify.com/v1/playlists/\";\r\nexport const audioENDPOINT = \"https://api.spotify.com/v1/audio-features/\";\r\n\r\nexport const clientID = \"440325bb5cab47af9d5f1af2cad762fa\";\r\nexport const secretID = \"c5bf0b3bd0ca4d4eac5b684505d7665d\";\r\n","import React from 'react'\nimport ReactDOM from 'react-dom'\n\nclass RenderPromise {\n\n  static render(promise, hyperscript, node) {\n    if (this.cancelCallback) this.cancelCallback();\n  \tlet doCancel = false;\n\n  \tReactDOM.render(this.createSpinner(), node);\n\n  \tpromise.then(result => {\n  \t\t\tif (doCancel) return;\n        ReactDOM.render(hyperscript(result), node);\n  \t\t})\n  \t  .catch(error => {\n  \t\t\tif (doCancel) return;\n  \t\t\tconst errorSpan = (<span>{error.message}</span>);\n        ReactDOM.render(errorSpan, node);\n  \t\t})\n\n  \t\tthis.cancelCallback = () => {doCancel = true;};\n  }\n\n  static createSpinner() {\n  \treturn React.createElement(\"div\", {className: \"spinnerClass\"},\n            React.createElement(\"img\", {height: 100,  alt: \"\", src: \"spinner.svg\"}));\n  }\n\n}\n\nexport default RenderPromise;\n","import React from 'react'\n\nconst NavbarPresentational = ({songs, muted, nav,  homepageControl, playlistControl, handleClick, openNav, onDrop, onDragOver, selectPlaylist}) => {\n  const [homepageAction, homepageMessage] = homepageControl;\n  const [playlistAction, playlistMessage] = playlistControl;\n  const nSongs = songs.length;\n  const dropEvent = onDrop;\n  const dragOverEvent = onDragOver;\n\n\n  return (\n    <div id=\"navbar\" className=\"navbar debug nothidden\">\n\n      {/* <h1 id=\"menu-title\" onClick={() => openNav(nav.navbarHidden)}>blobify</h1> */}\n      <h1 id=\"menu-title\">blobify.</h1>\n\n      <div className=\"navbarContent\">\n\n        <div className=\"navbarContent-playlist\">\n          {/* <button onClick={() => homepageAction()}>{homepageMessage}</button> */}\n          <br/>\n          <h2 id=\"content-title\">Pick playlist</h2>\n          <h4 id=\"content-title\">Switch playlist to <span className=\"tooltip\">blobify songs\n          <span className=\"tooltiptext\">What you see here is not random colors and shapes. <br/><br/>\n                                    Songs contain data. <br/> <br/>\n                                    A blob is a visual representation of a songs data, more so its energy and key. <br/><br/>\n                                    The level of energy determines its shape, key its color and the dots... - we call it blobify. </span>\n          </span></h4>\n     \n          <div className=\"playlist\">\n            <button id='playlist37i9dQZEVXbMDoHDwVN2tF' className=\"selected-playlist\" onClick={() => selectPlaylist('37i9dQZEVXbMDoHDwVN2tF')}>Global Top 50</button>\n            <button id='playlist37i9dQZEVXbLiRSasKsNU9' onClick={() => selectPlaylist('37i9dQZEVXbLiRSasKsNU9')}>Global Viral 50</button>\n            <button id='playlist37i9dQZEVXbeATsTOiMcX0' onClick={() => selectPlaylist('37i9dQZEVXbeATsTOiMcX0')}>Release Radar</button>\n            <button id='playlist37i9dQZF1DXbHhDw60mrNa' onClick={() => selectPlaylist('37i9dQZF1DXbHhDw60mrNa')}>Viral Hits</button>\n          </div>\n          <h5 id=\"content-title\">Fetched from Spotify</h5>\n\n        </div>\n\n        <div className=\"navbarContent-save droppable drophere\"\n          onDragOver={dragOverEvent}\n          onDrop={dropEvent}>\n          <h2 id=\"content-title\">Save songs</h2>\n          <h4 id=\"content-title\">Drag and drop blobs here to add songs to your personal collection.</h4>\n\n          {/* <div className=\"playlist\"></div> */}\n          <div className=\"collection\">\n            <div id=\"miniPreview\" className=\"miniPreviewScroll\"></div>\n\n            {/*<div className=\"drophere playlistCss droppable\"\n                    onDragOver={dragOverEvent}\n                    onDrop={dropEvent}><br/></div>*/}\n\n            {\n              /* <button className=\"playlistCss droppable\"\n                    onClick={() => playlistAction()}\n                    onDragOver={dragOverEvent}\n                    onDrop={dropEvent}>\n                    {playlistMessage}\n            </button><br/> */}\n\n            <button id=\"collection-button\" onClick={() => playlistAction()}>{playlistMessage}</button>\n          </div>\n        </div>\n      </div>\n\n      <div className='muteButton mute' onClick={() => handleClick(muted.audioMuted)}></div>\n    </div>\n  )\n}\n\nexport default NavbarPresentational\n","export const addSong = song => ({\n  type: 'ADD_SONG',\n  song\n})\n\nexport const removeSong = song => ({\n  type: 'REMOVE_SONG',\n  song\n})\n\nexport const setCurrentPlaylist = songs => ({\n  type: 'SET_PLAYLIST', \n  songs\n})\n\nexport const loadPlaylist = id => ({\n  type: 'LOAD_PLAYLIST',\n  id\n})\n\nexport const muteAudio = bool =>({\n  type: 'MUTE_AUDIO',\n  bool\n})\n\nexport const hideNavbar = bool =>({\n  type: 'HIDE_NAVBAR',\n  bool\n})","import { connect } from 'react-redux'\nimport NavbarPresentational from './NavbarPresentational'\nimport { muteAudio, addSong, removeSong, loadPlaylist, setCurrentPlaylist, hideNavbar } from '../../actions'\nimport { searchPlaylist } from '../../PlaylistModel'\n\nconst mapStateToProps = (state, ownProps) => {\n  return {\n    songs: state.currentPlaylist,\n    muted: state.audioMuted,\n    nav: state.navbarHidden\n  };\n};\n\nconst mapDispatchToProps = (dispatch, ownProps) => ({\n  homepageControl: [() => ownProps.history.push(\"/trending\"), \"Back to the trending songs\"],\n  playlistControl: [\n    () => {let root = document.getElementById(\"miniPreview\");\n          while(root.firstChild) {root.removeChild(root.firstChild)};\n          ownProps.history.push(\"/myplaylist\")},\"View collection\"],\n  handleClick: (muted) => {\n    dispatch(muteAudio(muted));\n\n    let muteButton = document.body.querySelector('.muteButton');\n    let currentClass = muteButton.classList[1];\n    //muteButton.classList.remove(currentClass);\n    //muteButton.classList.add((currentClass == 'mute'? 'unmute' : 'mute'));\n\n    let audioElements = document.getElementsByTagName(\"audio\");\n    \n    //sound on \n    if (muted===false){\n      console.log('mute');\n      muteButton.classList.remove('mute');\n      muteButton.classList.add('unmute');\n    \n    }\n    else if (muted===true){\n      console.log('unmute');\n      muteButton.classList.remove('unmute');\n      muteButton.classList.add('mute');\n    }\n    Object.keys(audioElements).map((i) =>\n      audioElements[i].muted = muted)\n    \n  },\n  openNav: (nav) => {\n    dispatch(hideNavbar(nav));\n\n    var navbarDiv = document.getElementById(\"navbar\");\n    let currentClass = navbarDiv.classList[2];\n\n    navbarDiv.classList.remove(currentClass);\n    navbarDiv.classList.add((currentClass == 'hidden'? 'nothidden' : 'hidden'));\n  },\n\n  onDrop: (ev) => {\n    console.log(\"Dropped into playlist\");\n    let song = ev.dataTransfer.getData(\"text/plain\");\n    //console.log(JSON.parse(song));\n    dispatch(addSong(JSON.parse(song)));\n    //If song is already in playlist then don't put it in here.\n    let miniPreview = document.getElementById(\"miniPreview\");\n    let root = document.getElementById(JSON.parse(song).track.id); //The original large blob\n    let rootCopy = document.getElementById(JSON.parse(song).track.id).cloneNode(true); //this is the mini blob\n\n    //Change the svg/blob dimensions.\n    rootCopy.getElementsByTagName('g')[0].setAttribute(\"transform\", \"matrix(1 0 0 1 0 -10) scale(0.2)\");\n    rootCopy.getElementsByTagName('svg')[0].setAttribute(\"height\", \"50\");\n    rootCopy.getElementsByTagName('svg')[0].setAttribute(\"width\", \"50\");\n    //rootCopy.removeAttribute(\"class\");\n    //rootCopy.addAttribute(\"class\", \"miniBlob\");\n    //Add a button event to miniBlob that removes the song from playlist and makes large blob visible.\n    rootCopy.addEventListener('click', function(ev){\n      dispatch(removeSong(JSON.parse(song)));\n      var children = miniPreview.children;\n      for(var i = 0; i < children.length; i++) {\n        var currChild = children[i];\n        if(currChild.getAttribute(\"id\") == JSON.parse(song).track.id) {\n          miniPreview.removeChild(currChild);\n          break;\n        }\n      }\n      //Make root element visible.\n      root.getElementsByTagName('svg')[0].setAttribute(\"opacity\", \"1.0\");\n    });\n    rootCopy.style.height = \"70px\";\n    rootCopy.style.width = \"60px\";\n\n    miniPreview.appendChild(rootCopy);\n    //Lower the div oppacity to show it's been added.\n    root.getElementsByTagName('svg')[0].setAttribute(\"opacity\", \"0.2\");\n  },\n  onDragOver: (ev) => {\n    ev.preventDefault()\n  },\n  selectPlaylist: (playlistID) => {\n    document.querySelectorAll('.selected-playlist')\n      .forEach(button => button.classList.remove('selected-playlist'));\n\n    let selectedButton = document.body.querySelector('#playlist'+playlistID);\n    selectedButton.classList.add('selected-playlist');\n\n    searchPlaylist(playlistID).then(data => dispatch(setCurrentPlaylist(data)));\n    dispatch(loadPlaylist(playlistID));\n  }\n})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(NavbarPresentational);\n","import React, { useRef, useEffect } from 'react'\n\nconst SearchPresentational = ({ songs, whenDone, onResultsClick, onAdd, onLoadPlaylist }) => {\n  const [doneCallback, doneMessage] = whenDone;\n  const [addCallback, addMessage] = onAdd;\n\n  useEffect(() => {\n    onLoadPlaylist('37i9dQZEVXbMDoHDwVN2tF')\n  }, []);\n\n  return (\n    <div id=\"search\" className=\"mainContent debug\">\n      <div id=\"resultsDiv\" onClick={event => onResultsClick(event.target, songs)}></div>\n      {/* <button className=\"nav\" onClick={() => doneCallback()}>{doneMessage}</button> */}\n    </div>\n  )\n}\n\nexport default SearchPresentational\n","import SearchPresentational from './SearchPresentational'\nimport { connect } from 'react-redux'\nimport { addSong, setCurrentPlaylist, loadPlaylist } from '../../actions'\nimport { searchPlaylist } from '../../PlaylistModel'\n\nconst mapStateToProps = (state) => {\n  return { songs: state.currentPlaylist }\n};\n\nconst mapDispatchToProps = (dispatch, ownProps) => ({\n  whenDone: [() => ownProps.history.push(\"/myplaylist\"), \"Go to My Playlist\"],\n  onResultsClick: (clickedNode, loadedSongs) => {\n        var clickOnSong = clickedNode.classList.contains(\"song\");\n        var clickOnAddButton = clickedNode.classList.contains(\"addButton\");\n        if (clickOnSong) {\n          const song_id = clickedNode.id;\n          //console.log(\"Song clicked: \" + song_id);\n\n          clickedNode.childNodes[1].classList.remove('buttonInvisible');\n          document.querySelectorAll('.buttonVisible').forEach(button => {\n            button.classList.remove('buttonVisible');\n            button.classList.add('buttonInvisible');\n          });\n          clickedNode.firstChild.classList.add('buttonVisible');\n        }\n\n        if (clickOnAddButton) {\n          //console.log(clickedNode.parentNode.id);\n          let clickedSongId = clickedNode.parentNode.id;\n          let song = loadedSongs.find(d => d.track.id == clickedSongId);\n          //console.log({song});\n          dispatch(addSong(song));\n        }\n    },\n  onAdd: [(song) => dispatch(addSong(song)), \"Add to the playlist\"],\n  onLoadPlaylist: (idPlaylist) => {\n    searchPlaylist(idPlaylist).then(data => dispatch(setCurrentPlaylist(data)));\n    dispatch(loadPlaylist(idPlaylist));\n  }\n})\n\n\nexport default connect(mapStateToProps, mapDispatchToProps)(SearchPresentational);\n","import React from 'react'\n\nconst PlaylistPresentational = ({ songs, whenDone, onDelete, displaySong, getBlob}) => {\n    const [doneCallback, doneMessage] = whenDone;\n    return (\n      <div id=\"summary\" className=\"\">\n        <div id=\"summaryContent\"><h2>Your collection</h2>\n        <div>\n        <div className=\"close\" onClick={() => doneCallback()}></div>\n        </div>\n          <table>\n            <thead>\n              <tr>\n                <th>Song</th>\n                <th>Genre</th>\n                <th>Release date</th>\n              </tr>\n            </thead>\n            <tbody id=\"tableBody\">\n              {songs.map((song, i) =>\n                <tr key={i}>\n                  <td id=\"blob\">{getBlob(song.track.id,0.8)}</td>\n                  <td>{displaySong(song)}</td>\n                  <td><h4>{song.track.name}</h4></td>\n                  <td><button onClick={() => onDelete(song)}>Delete from playlist</button></td>\n                </tr>\n              )}\n            </tbody>\n            <tfoot>\n              <tr>\n                <td>TOTAL SONGS</td><td></td><td>{songs.length}</td>\n                <td><button onClick={() => console.log(\"Export to spotify\")}>Export to spotify</button></td>\n              </tr>\n              \n            </tfoot>\n          </table>\n        </div>\n        <div id=\"backgroundSummary\" onClick={() => doneCallback()}></div>\n      </div>\n    )\n\n}\n\nexport default PlaylistPresentational\n","import { connect } from 'react-redux'\nimport PlaylistPresentational from './PlaylistPresentational'\nimport { removeSong } from '../../actions'\nimport { createSongDisplay, getBlob } from '../../PlaylistModel.js'\n\nconst mapStateToProps = (state) => {\n  return { songs: state.songs };\n};\n\nconst mapDispatchToProps = (dispatch, ownProps) => ({\n  whenDone: [() => ownProps.history.push(\"/trending\"), \"Back to the trending songs\"],\n  onDelete: song => dispatch(removeSong(song)),\n  displaySong: song => createSongDisplay(song),\n  getBlob: (id,scale) => getBlob(id,scale)\n  /*call: getBlobs()*/\n})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(PlaylistPresentational);\n","import React from 'react'\nimport { BrowserRouter as Router, Route, Redirect, Switch } from 'react-router-dom'\nimport Navbar from './Navbar/NavbarContainer'\nimport '../style.css'\nimport Search from './Search/SearchContainer'\nimport Playlist from './Playlist/PlaylistContainer'\n\nconst App = () => (\n    <Router>\n      <div className=\"flexParent\">\n        <Switch>\n          <Route exact path=\"/\" render={() => <Redirect to=\"/trending\" />} />\n        </Switch>\n        \n        <Route path=\"/trending\" component={Search}></Route>\n        <Route path=\"/myplaylist\" component={Playlist}></Route>\n        <Route component={Navbar}></Route>\n      </div>\n  </Router>\n)\n\nexport default App\n","function songs(state = [], action) {\n  let song = action.song;\n  switch (action.type) {\n    case 'ADD_SONG':\n      // Check if song is already in the playlist\n      console.log(state);\n      let alreadyPresent = state.some(d => d.track.id === song.track.id);\n      if (alreadyPresent) {\n        window.alert(`${song.track.name} is already present in the playlist.`);\n        return [...state];\n      } else {\n        return [...state, song];\n      }\n    case 'REMOVE_SONG':\n      return [...state].filter(d => d.track.id !== song.track.id);\n    default:\n      return [...state];\n  }\n}\n\nexport default songs\n","import {searchPlaylist, displaySongs} from '../PlaylistModel.js'\n\nconst currentPlaylist = (state = {}, action) => {\n  switch (action.type) {\n    case 'SET_PLAYLIST':\n      return action.songs;\n    case 'LOAD_PLAYLIST':\n      displaySongs(searchPlaylist(action.id)); //searchPlaylist() is a promise!\n      return state;\n    default:\n      return state;\n  }\n}\n\nexport default currentPlaylist\n","const audioMuted = (state = {}, action) => {\n  switch (action.type) {\n    case 'MUTE_AUDIO':\n      state.audioMuted = !action.bool;\n      return state;\n    default:\n      return state;\n  }\n}\n\nexport default audioMuted","const navbarHidden = (state = {}, action) => {\n  switch (action.type) {\n    case 'HIDE_NAVBAR':\n      state.navbarHidden = !action.bool;\n      return state;\n    default:\n      return state;\n  }\n}\n\nexport default navbarHidden","import { combineReducers } from 'redux'\nimport songs from './songs'\nimport currentPlaylist from './currentPlaylist'\nimport audioMuted from './audioMuted'\nimport navbarHidden from './navbarHidden'\n\nexport default combineReducers({\n  songs,\n  currentPlaylist,\n  audioMuted,\n  navbarHidden\n})\n","import React from 'react'\nimport { render } from 'react-dom'\nimport { createStore } from 'redux'\nimport { Provider } from 'react-redux'\nimport App from './components/App'\nimport rootReducer from './reducers'\nimport './style.css'\n\n// Retrieve saved model\nconst persistedState = localStorage.getItem('reduxState') ? JSON.parse(localStorage.getItem('reduxState')) : {};\nconst store = createStore(rootReducer, persistedState);\n// Update stored state when model changes\nstore.subscribe(() =>\n  localStorage.setItem('reduxState', JSON.stringify(store.getState()))\n);\n\nrender(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n)\n"],"sourceRoot":""}