{"version":3,"sources":["apiConfig.js","renderPromise.js","components/Navbar/NavbarPresentational.js","actions/index.js","components/Navbar/NavbarContainer.js","components/Search/SearchPresentational.js","components/Search/SearchContainer.js","components/Playlist/PlaylistPresentational.js","components/Playlist/PlaylistContainer.js","components/App.js","reducers/songs.js","reducers/currentPlaylist.js","reducers/audioMuted.js","reducers/index.js","index.js","PlaylistModel.js"],"names":["playlistENDPOINT","audioENDPOINT","clientID","secretID","RenderPromise","promise","hyperscript","node","this","cancelCallback","doCancel","ReactDOM","render","createSpinner","then","result","catch","error","errorSpan","message","React","createElement","className","height","alt","src","NavbarPresentational","songs","muted","homepageControl","playlistControl","handleClick","homepageAction","homepageMessage","playlistAction","playlistMessage","nSongs","length","id","onClick","audioMuted","addSong","song","type","connect","state","ownProps","currentPlaylist","dispatch","history","push","bool","muteButton","document","body","querySelector","currentClass","classList","remove","add","audioElements","getElementsByTagName","Object","keys","map","i","SearchPresentational","whenDone","onResultsClick","onAdd","onLoadPlaylist","doneCallback","doneMessage","useEffect","event","target","clickedNode","loadedSongs","clickOnSong","contains","clickOnAddButton","childNodes","querySelectorAll","forEach","button","firstChild","clickedSongId","parentNode","find","d","track","saveSong","idPlaylist","searchPlaylist","data","PlaylistPresentational","getSongCollection","onDelete","displaySong","coll","console","log","title","createTextNode","row","column","appendChild","loadCollection","songID","deleteSong","loadSong","createSongDisplay","App","exact","path","to","component","Navbar","Search","Playlist","action","alreadyPresent","some","window","alert","name","filter","displaySongs","combineReducers","persistedState","localStorage","getItem","JSON","parse","store","createStore","rootReducer","subscribe","setItem","stringify","getState","getElementById","firebase","require","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","db","firestore","songListPromise","Fragment","setTimeout","root","retrieve","audio_features","features","svg","preview_url","key","items","query","payload","apiConfig","encodedPayload","Buffer","toString","access_token","myHeaders","Headers","append","urlencoded","URLSearchParams","token","fetch","method","headers","redirect","response","json","a","fetchString","playlist","getSong","collection","doc","set","preview","timestamp","FieldValue","serverTimestamp","get","delete","querySnapshot"],"mappings":"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","file":"static/js/main.f42ba2d0.chunk.js","sourcesContent":["export const tokenENDPOINT= \"https://accounts.spotify.com/api/token\";\r\nexport const playlistENDPOINT = \"https://api.spotify.com/v1/playlists/\";\r\nexport const audioENDPOINT = \"https://api.spotify.com/v1/audio-features/\";\r\n\r\nexport const clientID = \"440325bb5cab47af9d5f1af2cad762fa\";\r\nexport const secretID = \"c5bf0b3bd0ca4d4eac5b684505d7665d\";\r\n","import React from 'react'\nimport ReactDOM from 'react-dom'\n\nclass RenderPromise {\n\n  static render(promise, hyperscript, node) {\n    if (this.cancelCallback) this.cancelCallback();\n  \tlet doCancel = false;\n\n  \tReactDOM.render(this.createSpinner(), node);\n\n  \tpromise.then(result => {\n  \t\t\tif (doCancel) return;\n        ReactDOM.render(hyperscript(result), node);\n  \t\t})\n  \t  .catch(error => {\n  \t\t\tif (doCancel) return;\n  \t\t\tconst errorSpan = (<span>{error.message}</span>);\n        ReactDOM.render(errorSpan, node);\n  \t\t})\n\n  \t\tthis.cancelCallback = () => {doCancel = true;};\n  }\n\n  static createSpinner() {\n  \treturn React.createElement(\"div\", {className: \"spinnerClass\"},\n            React.createElement(\"img\", {height: 100,  alt: \"\", src: \"http://cdn.lowgif.com/full/d9675675623d5f27-loading-gif-transparent-background-loading-gif.gif\"}));\n  }\n\n}\n\nexport default RenderPromise;\n","import React from 'react'\n\nconst NavbarPresentational = ({songs, muted, homepageControl, playlistControl, handleClick}) => {\n  const [homepageAction, homepageMessage] = homepageControl;\n  const [playlistAction, playlistMessage] = playlistControl;\n  const nSongs = songs.length;\n\n  return (\n    <div id=\"navbar\" className=\"navbar debug\">\n      <button onClick={() => homepageAction()}>{homepageMessage}</button>\n      <button onClick={() => playlistAction()}>{playlistMessage}</button><br/>\n      <span>\n        Displaying {nSongs} of the hottest songs!<br/>\n        Last update: {/*insert time of last update here*/}\n      </span>\n      <div className='muteButton mute' onClick={() => handleClick(muted.audioMuted)}></div>\n    </div>\n  )\n}\n\nexport default NavbarPresentational\n","export const addSong = song => ({\n  type: 'ADD_SONG',\n  song\n})\n\nexport const removeSong = song => ({\n  type: 'REMOVE_SONG',\n  song\n})\n\nexport const setCurrentPlaylist = songs => ({\n  type: 'SET_PLAYLIST', \n  songs\n})\n\nexport const loadPlaylist = id => ({\n  type: 'LOAD_PLAYLIST',\n  id\n})\n\nexport const muteAudio = bool =>({\n  type: 'MUTE_AUDIO',\n  bool\n})","import { connect } from 'react-redux'\nimport NavbarPresentational from './NavbarPresentational'\nimport { muteAudio } from '../../actions'\n\nconst mapStateToProps = (state, ownProps) => {\n  return { \n    songs: state.currentPlaylist,\n    muted: state.audioMuted\n  };\n};\n\nconst mapDispatchToProps = (dispatch, ownProps) => ({\n  homepageControl: [() => ownProps.history.push(\"/trending\"), \"Back to the trending songs\"],\n  playlistControl: [() => ownProps.history.push(\"/myplaylist\"), \"My playlist\"],\n  handleClick: (muted) => {\n    dispatch(muteAudio(muted));\n\n    let muteButton = document.body.querySelector('.muteButton');\n    let currentClass = muteButton.classList[1];\n    muteButton.classList.remove(currentClass);\n    muteButton.classList.add((currentClass == 'mute'? 'unmute' : 'mute'));\n\n    let audioElements = document.getElementsByTagName(\"audio\");\n    Object.keys(audioElements).map((i) => \n      audioElements[i].muted = muted)\n    \n  }\n})\n\n\nexport default connect(mapStateToProps, mapDispatchToProps)(NavbarPresentational);\n","import React, { useRef, useEffect } from 'react'\n\nconst SearchPresentational = ({ songs, whenDone, onResultsClick, onAdd, onLoadPlaylist }) => {\n  const [doneCallback, doneMessage] = whenDone;\n  const [addCallback, addMessage] = onAdd;\n\n  useEffect(() => {\n    onLoadPlaylist('37i9dQZEVXbMDoHDwVN2tF')\n  }, []);\n\n  return (\n    <div id=\"search\" className=\"mainContent debug\">\n      <div id=\"resultsDiv\" onClick={event => onResultsClick(event.target, songs)}></div>\n      <button className=\"nav\" onClick={() => doneCallback()}>{doneMessage}</button>\n    </div>\n  )\n}\n\nexport default SearchPresentational\n","import SearchPresentational from './SearchPresentational'\nimport { connect } from 'react-redux'\nimport { addSong, setCurrentPlaylist, loadPlaylist } from '../../actions'\nimport { searchPlaylist, saveSong } from '../../PlaylistModel'\n\nconst mapStateToProps = (state) => {\n  return { songs: state.currentPlaylist }\n};\n\nconst mapDispatchToProps = (dispatch, ownProps) => ({\n  whenDone: [() => ownProps.history.push(\"/myplaylist\"), \"Go to My Playlist\"],\n  onResultsClick: (clickedNode, loadedSongs) => {\n        var clickOnSong = clickedNode.classList.contains(\"song\");\n        var clickOnAddButton = clickedNode.classList.contains(\"addButton\");\n        if (clickOnSong) {\n          const song_id = clickedNode.id;\n          //console.log(\"Song clicked: \" + song_id);\n          \n          clickedNode.childNodes[1].classList.remove('buttonInvisible');\n          document.querySelectorAll('.buttonVisible').forEach(button => {\n            button.classList.remove('buttonVisible');\n            button.classList.add('buttonInvisible');\n          });\n          clickedNode.firstChild.classList.add('buttonVisible');\n        }\n\n        if (clickOnAddButton) {\n          //console.log(clickedNode.parentNode.id);\n          let clickedSongId = clickedNode.parentNode.id;\n          let song = loadedSongs.find(d => d.track.id == clickedSongId);\n          saveSong(song);\n          dispatch(addSong(song));\n        }\n    },\n  onAdd: [(song) => dispatch(addSong(song)), \"Add to the playlist\"],\n  onLoadPlaylist: (idPlaylist) => {\n    searchPlaylist(idPlaylist).then(data => dispatch(setCurrentPlaylist(data)));\n    dispatch(loadPlaylist(idPlaylist));\n  }\n})\n\n\nexport default connect(mapStateToProps, mapDispatchToProps)(SearchPresentational);","import React from 'react'\n\nconst PlaylistPresentational = ({ songs, getSongCollection, whenDone, onDelete, displaySong }) => {\n    const [doneCallback, doneMessage] = whenDone;\n    let collection = getSongCollection();\n    //console.log({collection});\n    \n    collection.then(coll => {\n      coll.map((song, i) => {\n        console.log({song});\n        let title = document.createTextNode(song.title);\n        let row = document.createElement('tr');\n        let column = document.createElement('td');\n\n        column.appendChild(title);\n        row.appendChild(column);\n        document.querySelector('tbody').appendChild(row);\n      });\n    })\n\n    return (\n      <div id=\"summary\" className=\"mainContent debug\">\n        <div>Current playlist:\n          <table>\n            <thead>\n              <tr>\n                <th>Song</th>\n                <th>Title</th>\n                <th>Time of addition</th>\n              </tr>\n            </thead>\n            <tbody>\n              {\n              \n              /*\n              collection.forEach((song, i) =>\n                <tr key={i}>\n                  <td>HERE WILL BE THE BLOB</td>\n                  <td>{song.title}</td>\n                  <td>{song.timestamp}</td>\n                  <td><button onClick={() => onDelete(song.id)}>Delete from playlist</button></td>\n                </tr>\n              )*/\n              }\n            </tbody>\n            <tfoot>\n              <tr><td>TOTAL SONGS</td><td></td><td>{songs.length}</td></tr>\n            </tfoot>\n          </table>\n        </div>\n        <div>\n          <button className=\"nav\" onClick={() => doneCallback()}>{doneMessage}</button>\n        </div>\n      </div>\n    )\n\n}\n\nexport default PlaylistPresentational\n","import { connect } from 'react-redux'\nimport PlaylistPresentational from './PlaylistPresentational'\nimport { removeSong } from '../../actions'\nimport { createSongDisplay, loadSong, deleteSong, loadCollection } from '../../PlaylistModel.js'\n\nconst mapStateToProps = (state) => {\n  return { songs: state.songs };\n};\n\nconst mapDispatchToProps = (dispatch, ownProps) => ({\n  getSongCollection: () => loadCollection(),\n  whenDone: [() => ownProps.history.push(\"/trending\"), \"Back to the trending songs\"],\n  onDelete: songID => {\n    deleteSong(songID);\n    //dispatch(removeSong(song));\n  },\n  displaySong: song => {\n    loadSong(song);\n    createSongDisplay(song);\n  },\n})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(PlaylistPresentational);\n","import React from 'react'\nimport { BrowserRouter as Router, Route, Redirect, Switch } from 'react-router-dom'\nimport Navbar from './Navbar/NavbarContainer'\nimport '../style.css'\nimport Search from './Search/SearchContainer'\nimport Playlist from './Playlist/PlaylistContainer'\n\nconst App = () => (\n    <Router>\n      <div className=\"flexParent\">\n        <Switch>\n          <Route exact path=\"/\" render={() => <Redirect to=\"/trending\" />} />\n        </Switch>\n        <Route component={Navbar}></Route>\n        <Route path=\"/trending\" component={Search}></Route>\n        <Route path=\"/myplaylist\" component={Playlist}></Route>\n      </div>\n  </Router>\n)\n\nexport default App\n","import { computeAdditionTimestamp } from '../PlaylistModel.js'\n\nfunction songs(state = [], action) {\n  let song = action.song;\n  switch (action.type) {\n    case 'ADD_SONG':\n      // Check if song is already in the playlist\n      let alreadyPresent = state.some(d => d.track.id === song.track.id);\n      if (alreadyPresent) {\n        window.alert(`${song.track.name} is already present in the playlist.`);\n        return [...state];\n      } else {\n        return [...state, song];\n      }\n    case 'REMOVE_SONG':\n      return [...state].filter(d => d.track.id !== song.track.id);\n    default:\n      return [...state];\n  }\n}\n\nexport default songs\n","import {searchPlaylist, displaySongs} from '../PlaylistModel.js'\n\nconst currentPlaylist = (state = {}, action) => {\n  switch (action.type) {\n    case 'SET_PLAYLIST':\n      return action.songs;\n    case 'LOAD_PLAYLIST':\n      displaySongs(searchPlaylist(action.id)); //searchPlaylist() is a promise!\n      return state;\n    default:\n      return state;\n  }\n}\n\nexport default currentPlaylist\n","const audioMuted = (state = {}, action) => {\n  switch (action.type) {\n    case 'MUTE_AUDIO':\n      state.audioMuted = !action.bool;\n      return state;\n    default:\n      return state;\n  }\n}\n\nexport default audioMuted","import { combineReducers } from 'redux'\nimport songs from './songs'\nimport currentPlaylist from './currentPlaylist'\nimport audioMuted from './audioMuted'\n\nexport default combineReducers({\n  songs,\n  currentPlaylist,\n  audioMuted\n})\n","import React from 'react'\nimport { render } from 'react-dom'\nimport { createStore } from 'redux'\nimport { Provider } from 'react-redux'\nimport App from './components/App'\nimport rootReducer from './reducers'\nimport './style.css'\n\n// Retrieve saved model\nconst persistedState = localStorage.getItem('reduxState') ? JSON.parse(localStorage.getItem('reduxState')) : {};\nconst store = createStore(rootReducer, persistedState);\n// Update stored state when model changes\nstore.subscribe(() =>\n  localStorage.setItem('reduxState', JSON.stringify(store.getState()))\n);\n\nrender(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n)\n","import * as apiConfig from './apiConfig.js'\nimport RenderPromise from './renderPromise.js'\nimport React from 'react'\n\nconst firebase = require(\"firebase\");\n// Required for side-effects\nrequire(\"firebase/firestore\");\n\n// Your web app's Firebase configuration\nvar firebaseConfig = {\n  apiKey: \"AIzaSyAPO4fSzO6KUyphdBvNLHr0UMr7ArpPVK4\",\n  authDomain: \"iprog2020.firebaseapp.com\",\n  databaseURL: \"https://iprog2020.firebaseio.com\",\n  projectId: \"iprog2020\",\n  storageBucket: \"iprog2020.appspot.com\",\n  messagingSenderId: \"667835768822\",\n  appId: \"1:667835768822:web:407e0382496fd8a7f731d7\"\n};\n\n// Initialize Firebase\nfirebase.initializeApp(firebaseConfig);\nvar db = firebase.firestore();\n\n  export function displaySongs(songListPromise) {\n    RenderPromise.render(\n      songListPromise,\n      songs => React.createElement(React.Fragment, {}, songs.map(song => createSongDisplay(song))),\n      document.getElementById('resultsDiv'));\n\n    setTimeout(() => {\n      let songs = document.body.querySelectorAll('.song');\n      songs.forEach(song => {\n        let root = document.getElementById(song.id);\n        searchAudioFeatures(song.id).then(features => {\n          \n          var svg = window[\"blobCreator\"](features);\n          root.appendChild(svg);\n \n        });\n      });\n    }, 1000);\n  }\n\n  export function createSongDisplay(song) {\n    if (song.track.preview_url !== null){\n    return (\n      <div id={song.track.id} key={song.track.id} className='song'>\n        <audio id={'audio'+song.track.id} src={song.track.preview_url} muted></audio>\n        <button className='addButton buttonInvisible'>Add to playlist</button><br/>\n        {song.track.name}<br/>\n      </div>\n    );\n    }\n  }\n\n  export function searchPlaylist(name) {\n    // Replace variables in case they are falsy (e.g. empty string, null, undefined)\n    name = name || \"37i9dQZEVXbMDoHDwVN2tF\";\n\n    return retrieve(name, 'playlist').then(data => data.items); // leave out the unimportant parts of the response data\n  }\n\n  export function searchAudioFeatures(id) {\n    // Replace variables in case they are falsy (e.g. empty string, null, undefined)\n    id = id || \"\";\n\n    return retrieve('?ids='+id, 'audio').then(data => data.audio_features[0]);\n  }\n\n  export function retrieve(query, type) {\n    const payload = apiConfig.clientID+\":\"+apiConfig.secretID;\n    const encodedPayload = new Buffer(payload).toString(\"base64\");\n\n    let access_token = \"\";\n\n    const myHeaders = new Headers();\n    myHeaders.append(\"Authorization\", \"Basic \" + encodedPayload);\n    const urlencoded = new URLSearchParams();\n    urlencoded.append(\"grant_type\", \"client_credentials\");\n    const requestOptions = {\n      method: 'POST',\n      headers: myHeaders,\n      body: urlencoded,\n      redirect: 'follow'\n    };\n    const token = fetch(\"https://accounts.spotify.com/api/token\", requestOptions)\n    .then(response => response.json())\n    .catch(error => console.log('error', error));\n\n    async function getSong(type) {\n      let wait = await token.then(result => access_token = result.access_token);\n      let fetchString = (type == 'playlist') ? \n        apiConfig.playlistENDPOINT + query + '/tracks' : \n        apiConfig.audioENDPOINT + query;\n\n      let playlist = fetch(fetchString, {\n        method: 'GET',\n        headers: {\n          'Accept': 'application/json',\n          'Content-Type': 'application/json',\n          'Authorization': 'Bearer ' + access_token\n        }\n      }).then(response => {\n        return response.json();\n      });\n\n      return playlist;\n    }\n\n    return getSong(type);\n  }\n\n  // Saves a new song to your Cloud Firestore database.\n  export function saveSong(song) {\n    // Add a new song object to the database.\n    db.collection('playlist').doc(song.track.id).set({\n      id: song.track.id,\n      title: song.track.name,\n      preview: song.track.preview_url,\n      timestamp: firebase.firestore.FieldValue.serverTimestamp()\n    })\n    .catch(function(error) {\n      console.error('Error writing new message to database', error);\n    });\n    \n  }\n\n  export function loadSong(song) {\n    db.collection('playlist').doc(song.track.id).get().then(function(doc) {\n      console.log(`${doc.id} => ${doc.data().title}`);\n    });\n  }\n\n  export function deleteSong(id) {\n    db.collection(\"playlist\").doc(id).delete().then(function() {\n      console.log(\"Document successfully deleted!\");\n    }).catch(function(error) {\n        console.error(\"Error removing document: \", error);\n    });\n  }\n\n  export function loadCollection() {\n    return db.collection(\"playlist\").get().then((querySnapshot) => {\n      let collection = [];\n      querySnapshot.forEach((doc, i) => {\n        let data = doc.data();  \n          console.log(`${doc.id} => ${doc.data()}`);\n          collection.push(doc.data());\n      });\n      console.log({collection});\n      return collection;\n    });\n  }\n"],"sourceRoot":""}