{"version":3,"sources":["PlaylistModel.js","apiConfig.js","renderPromise.js","components/Navbar/NavbarPresentational.js","actions/index.js","components/Navbar/NavbarContainer.js","components/Search/SearchPresentational.js","components/Search/SearchContainer.js","components/Playlist/PlaylistPresentational.js","components/Playlist/PlaylistContainer.js","components/App.js","reducers/songs.js","reducers/currentPlaylist.js","reducers/audioMuted.js","reducers/navbarHidden.js","reducers/index.js","index.js"],"names":["firebase","require","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","firestore","displaySongs","songListPromise","RenderPromise","render","songs","React","createElement","Fragment","map","song","createSongDisplay","document","getElementById","setTimeout","body","querySelectorAll","forEach","root","id","searchAudioFeatures","then","features","svg","window","appendChild","key","energy","getBlob","getElementsByTagName","length","console","log","querySelector","innerHTML","track","preview_url","className","onDragStart","e","draggable","onContextMenu","openTooltip","src","muted","loop","name","artists","artist","href","external_urls","spotify","target","rel","ev","dataTransfer","setData","JSON","stringify","effectAllowed","getElementsByClassName","tooltip","currentClass","classList","remove","add","searchPlaylist","retrieve","data","items","audio_features","query","type","payload","apiConfig","encodedPayload","Buffer","toString","access_token","myHeaders","Headers","append","urlencoded","URLSearchParams","token","fetch","method","headers","redirect","response","json","catch","error","a","result","fetchString","playlist","getSong","playlistENDPOINT","audioENDPOINT","clientID","secretID","promise","hyperscript","node","this","cancelCallback","doCancel","ReactDOM","createSpinner","errorSpan","message","height","alt","NavbarPresentational","homepageControl","nav","playlistControl","handleClick","onDrop","openNav","onDragOver","selectPlaylist","playlistAction","playlistMessage","dropEvent","dragOverEvent","class","onClick","audioMuted","addSong","removeSong","setCurrentPlaylist","loadPlaylist","connect","state","ownProps","currentPlaylist","navbarHidden","dispatch","history","push","firstChild","removeChild","bool","muteButton","audioElements","Object","keys","i","navbarDiv","getData","parse","miniPreview","rootCopy","cloneNode","setAttribute","addEventListener","children","currChild","getAttribute","style","width","preventDefault","playlistID","button","SearchPresentational","whenDone","onResultsClick","onAdd","onLoadPlaylist","useEffect","event","clickedNode","loadedSongs","clickOnSong","contains","clickOnAddButton","childNodes","clickedSongId","parentNode","find","d","idPlaylist","PlaylistPresentational","onDelete","displaySong","doneCallback","doneMessage","App","exact","path","to","component","Search","Playlist","Navbar","action","alreadyPresent","some","alert","filter","combineReducers","persistedState","localStorage","getItem","store","createStore","rootReducer","subscribe","setItem","getState"],"mappings":"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","file":"static/js/main.0164b0d0.chunk.js","sourcesContent":["import * as apiConfig from './apiConfig.js'\nimport RenderPromise from './renderPromise.js'\nimport React from 'react'\n\nconst firebase = require(\"firebase\");\n// Required for side-effects\nrequire(\"firebase/firestore\");\n\n// Your web app's Firebase configuration\nvar firebaseConfig = {\n  apiKey: \"AIzaSyAPO4fSzO6KUyphdBvNLHr0UMr7ArpPVK4\",\n  authDomain: \"iprog2020.firebaseapp.com\",\n  databaseURL: \"https://iprog2020.firebaseio.com\",\n  projectId: \"iprog2020\",\n  storageBucket: \"iprog2020.appspot.com\",\n  messagingSenderId: \"667835768822\",\n  appId: \"1:667835768822:web:407e0382496fd8a7f731d7\"\n};\n\n// Initialize Firebase\nfirebase.initializeApp(firebaseConfig);\nvar db = firebase.firestore();\n\nexport function displaySongs(songListPromise) {\n  RenderPromise.render(\n    songListPromise,\n    songs => React.createElement(React.Fragment, {}, songs.map(song => createSongDisplay(song))),\n    document.getElementById('resultsDiv'));\n\n    //features=> React.createElement(React.Fragment, {}, features.map(feature => createSongDisplay(feature))),\n    //document.getElementById('tooltip-\"+id'));\n\n    setTimeout(() => {\n      let songs = document.body.querySelectorAll('.song');\n      songs.forEach(song => {\n        let root = document.getElementById(song.id);\n        searchAudioFeatures(song.id).then(features => {\n          var svg = window[\"blobCreator\"](features);\n          root.appendChild(svg);\n          var key = features.key;\n          var energy = features.energy;\n        });\n      });\n    }, 1000);\n}\n\n// console.log(songObj)\n\nexport function getBlob(id, root) {\n  setTimeout(() => {\n    let root = document.getElementById(id);\n    if (root === null || root.getElementsByTagName('svg').length) {\n      return;\n    }\n    searchAudioFeatures(id).then(features => {\n      var svg = window[\"blobCreator\"](features);\n      root.appendChild(svg);\n      \n    });\n\n  }, 1000);\n\n}\n\n\n/*\n  Give drag drop element to this.\n*/\nexport function createSongDisplay(song) {\n  searchAudioFeatures(song.id).then(features => {\n    console.log('Song features', {features}); //you should be able to see all the song's features\n\n    //change the content of the (initially empty) h4's\n    document.querySelector('#energyH').innerHTML = 'Energy: ' + features.energy + '- thereby dots, shape';\n    //TODO: continue\n  });\n\n  if (song.track.preview_url !== null){\n  return (\n    <div id={song.track.id} key={song.track.id} className='song draggable songtooltip'\n          onDragStart={(e)=>onDragStart(e, song)} draggable onContextMenu={(e)=>openTooltip(song.track.id)}>\n      <audio id={'audio'+song.track.id} src={song.track.preview_url} muted loop></audio>\n      <div id={\"tooltip-\"+song.track.id} className=\"tooltiptext hidden\">\n        <h3>{song.track.name}</h3>\n        <h4>{song.track.artists.map(artist => {return artist.name})}</h4>\n        <br/>\n\n        <h4 id='energyH'></h4>\n        <h4>Key:  - thereby color </h4>\n\n        <br/>\n        <a href={song.track.external_urls.spotify} target=\"_blank\" rel=\"noopener noreferrer\">Open in Spotify</a>\n        \n      </div>\n    \n      {/* <button className='addButton buttonInvisible'>Add to playlist</button><br/> */}\n      <br/>\n    </div>\n  );\n  }\n}\nconst onDragStart = (ev, song) => {\n  console.log(\"Song \" + song.track.name + \" is being dragged\");\n  ev.dataTransfer.setData(\"text/plain\", JSON.stringify(song));\n  //Want to transfer the html element being dragged\n  //let root = document.getElementById(song.track.id);\n  //If the element has an svg child => the blob\n  // if(root.getElementsByTagName('svg').length) {\n  //   ev.dataTransfer.setData(\"text/html\", root);\n  // }\n  ev.dataTransfer.effectAllowed = \"copy\";\n}\nconst openTooltip = (id) => {\n  console.log(\"open tooltip\")\n  var visibleTooltips = document.getElementsByClassName(\"tooltiptext visible\");\n  \n    // for (var i = 0, len = visibleTooltips.length; i < len; i++) {\n    //   console.log(visibleTooltips[i])\n    //   visibleTooltips[i].classList.add('hidden');\n    //   visibleTooltips[i].classList.remove('visible');\n    //   }\n\n  // var visibleTooltips = document.getElementsByClassName(\"tooltiptext visible\");\n  // visibleTooltips.classList.add('hidden');\n  // visibleTooltips.classList.remove('visible');\n  \n  var tooltip = document.getElementById(\"tooltip-\"+id);\n  let currentClass = tooltip.classList[1];\n  tooltip.classList.remove(currentClass);\n  tooltip.classList.add((currentClass === 'hidden'? 'visible' : 'hidden'));\n}\n\nexport function searchPlaylist(name) {\n  // Replace variables in case they are falsy (e.g. empty string, null, undefined)\n  name = name || \"37i9dQZEVXbMDoHDwVN2tF\";\n\n  return retrieve(name, 'playlist').then(data => data.items); // leave out the unimportant parts of the response data\n}\n\nexport function searchAudioFeatures(id) {\n  // Replace variables in case they are falsy (e.g. empty string, null, undefined)\n  id = id || \"\";\n\n  return retrieve('?ids='+id, 'audio').then(data => data.audio_features[0]);\n}\n\n\nexport function retrieve(query, type) {\n  const payload = apiConfig.clientID+\":\"+apiConfig.secretID;\n  const encodedPayload = new Buffer(payload).toString(\"base64\");\n\n  let access_token = \"\";\n\n  const myHeaders = new Headers();\n  myHeaders.append(\"Authorization\", \"Basic \" + encodedPayload);\n  const urlencoded = new URLSearchParams();\n  urlencoded.append(\"grant_type\", \"client_credentials\");\n  const requestOptions = {\n    method: 'POST',\n    headers: myHeaders,\n    body: urlencoded,\n    redirect: 'follow'\n  };\n  const token = fetch(\"https://accounts.spotify.com/api/token\", requestOptions)\n  .then(response => response.json())\n  .catch(error => console.log('error', error));\n\n  async function getSong(type) {\n    let wait = await token.then(result => access_token = result.access_token);\n    let fetchString = (type === 'playlist') ?\n      apiConfig.playlistENDPOINT + query + '/tracks' :\n      apiConfig.audioENDPOINT + query;\n\n    let playlist = fetch(fetchString, {\n      method: 'GET',\n      headers: {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json',\n        'Authorization': 'Bearer ' + access_token\n      }\n    }).then(response => {\n      return response.json();\n    });\n\n    return playlist;\n  }\n\n  return getSong(type);\n}\n\n// Saves a new song to your Cloud Firestore database.\nexport function saveSong(song) {\n  // Add a new song object to the database.\n  db.collection('playlist').doc(song.track.id).set({\n    id: song.track.id,\n    title: song.track.name,\n    preview: song.track.preview_url,\n    timestamp: firebase.firestore.FieldValue.serverTimestamp()\n  })\n  .catch(function(error) {\n    console.error('Error writing new message to database', error);\n  });\n  \n}\n\n// Loads a specific song from a firestore collection\nexport function loadSong(song) {\n  db.collection('playlist').doc(song.track.id).get().then(function(doc) {\n    console.log(`${doc.id} => ${doc.data().title}`);\n  });\n}\n\n// Deletes a specific song from a firestore collection\nexport function deleteSong(id) {\n  db.collection(\"playlist\").doc(id).delete().then(function() {\n    console.log(\"Document successfully deleted!\");\n  }).catch(function(error) {\n      console.error(\"Error removing document: \", error);\n  });\n}\n\n// Loads the content of an entire database collection\nexport function loadCollection() {\n  return db.collection(\"playlist\").get().then((querySnapshot) => {\n    let collection = [];\n    querySnapshot.forEach((doc, i) => {\n      let data = doc.data();  \n        console.log(`${doc.id} => ${doc.data()}`);\n        collection.push(doc.data());\n    });\n    console.log({collection});\n    return collection;\n  });\n}\n","export const tokenENDPOINT= \"https://accounts.spotify.com/api/token\";\r\nexport const playlistENDPOINT = \"https://api.spotify.com/v1/playlists/\";\r\nexport const audioENDPOINT = \"https://api.spotify.com/v1/audio-features/\";\r\n\r\nexport const clientID = \"440325bb5cab47af9d5f1af2cad762fa\";\r\nexport const secretID = \"c5bf0b3bd0ca4d4eac5b684505d7665d\";\r\n","import React from 'react'\nimport ReactDOM from 'react-dom'\n\nclass RenderPromise {\n\n  static render(promise, hyperscript, node) {\n    if (this.cancelCallback) this.cancelCallback();\n  \tlet doCancel = false;\n\n  \tReactDOM.render(this.createSpinner(), node);\n\n  \tpromise.then(result => {\n  \t\t\tif (doCancel) return;\n        ReactDOM.render(hyperscript(result), node);\n  \t\t})\n  \t  .catch(error => {\n  \t\t\tif (doCancel) return;\n  \t\t\tconst errorSpan = (<span>{error.message}</span>);\n        ReactDOM.render(errorSpan, node);\n  \t\t})\n\n  \t\tthis.cancelCallback = () => {doCancel = true;};\n  }\n\n  static createSpinner() {\n  \treturn React.createElement(\"div\", {className: \"spinnerClass\"},\n            React.createElement(\"img\", {height: 100,  alt: \"\", src: \"http://cdn.lowgif.com/full/d9675675623d5f27-loading-gif-transparent-background-loading-gif.gif\"}));\n  }\n\n}\n\nexport default RenderPromise;\n","import React from 'react'\n\nconst NavbarPresentational = ({songs, muted, nav,  homepageControl, playlistControl, handleClick, openNav, onDrop, onDragOver, selectPlaylist}) => {\n  const [homepageAction, homepageMessage] = homepageControl;\n  const [playlistAction, playlistMessage] = playlistControl;\n  const nSongs = songs.length;\n  const dropEvent = onDrop;\n  const dragOverEvent = onDragOver;\n\n\n  return (\n    <div id=\"navbar\" className=\"navbar debug nothidden\">\n\n      {/* <h1 id=\"menu-title\" onClick={() => openNav(nav.navbarHidden)}>blobify</h1> */}\n      <h1 id=\"menu-title\">blobify.</h1>\n\n      <div className=\"navbarContent\">\n\n        <div className=\"navbarContent-playlist\">\n          {/* <button onClick={() => homepageAction()}>{homepageMessage}</button> */}\n          <br/>\n          <h2 id=\"content-title\">Pick playlist</h2>\n          <h4 id=\"content-title\">Switch playlist to <span className=\"tooltip\">blobify songs\n          <span className=\"tooltiptext\">What you see here is not random colors and shapes. <br/><br/>\n                                    Songs contain data. <br/> <br/>\n                                    A blob is a visual representation of a songs data, more so its energy and key. <br/><br/>\n                                    The level of energy determines its shape, key its color and the dots... - we call it blobify. </span>\n          </span></h4>\n     \n          <div className=\"playlist\">\n            <button id='playlist37i9dQZEVXbMDoHDwVN2tF' class=\"selected-playlist\" onClick={() => selectPlaylist('37i9dQZEVXbMDoHDwVN2tF')}>Global Top 50</button>\n            <button id='playlist37i9dQZEVXbLiRSasKsNU9' onClick={() => selectPlaylist('37i9dQZEVXbLiRSasKsNU9')}>Global Viral 50</button>\n            <button id='playlist37i9dQZEVXbeATsTOiMcX0' onClick={() => selectPlaylist('37i9dQZEVXbeATsTOiMcX0')}>Release Radar</button>\n            <button id='playlist37i9dQZF1DXbHhDw60mrNa' onClick={() => selectPlaylist('37i9dQZF1DXbHhDw60mrNa')}>Viral Hits</button>\n          </div>\n          <h5 id=\"content-title\">Fetched from Spotify</h5>\n\n        </div>\n\n        <div className=\"navbarContent-save droppable drophere\"\n          onDragOver={dragOverEvent}\n          onDrop={dropEvent}>\n          <h2 id=\"content-title\">Save songs</h2>\n          <h4 id=\"content-title\">Drag and drop blobs here to add songs to your personal collection.</h4>\n\n          {/* <div className=\"playlist\"></div> */}\n          <div className=\"collection\">\n            <div id=\"miniPreview\" className=\"miniPreviewScroll\"></div>\n\n            {/*<div className=\"drophere playlistCss droppable\"\n                    onDragOver={dragOverEvent}\n                    onDrop={dropEvent}><br/></div>*/}\n\n            {\n              /* <button className=\"playlistCss droppable\"\n                    onClick={() => playlistAction()}\n                    onDragOver={dragOverEvent}\n                    onDrop={dropEvent}>\n                    {playlistMessage}\n            </button><br/> */}\n\n            <button id=\"collection-button\" onClick={() => playlistAction()}>{playlistMessage}</button>\n          </div>\n        </div>\n      </div>\n\n      <div className='muteButton mute' onClick={() => handleClick(muted.audioMuted)}></div>\n    </div>\n  )\n}\n\nexport default NavbarPresentational\n","export const addSong = song => ({\n  type: 'ADD_SONG',\n  song\n})\n\nexport const removeSong = song => ({\n  type: 'REMOVE_SONG',\n  song\n})\n\nexport const setCurrentPlaylist = songs => ({\n  type: 'SET_PLAYLIST', \n  songs\n})\n\nexport const loadPlaylist = id => ({\n  type: 'LOAD_PLAYLIST',\n  id\n})\n\nexport const muteAudio = bool =>({\n  type: 'MUTE_AUDIO',\n  bool\n})\n\nexport const hideNavbar = bool =>({\n  type: 'HIDE_NAVBAR',\n  bool\n})","import { connect } from 'react-redux'\nimport NavbarPresentational from './NavbarPresentational'\nimport { muteAudio, addSong, removeSong, loadPlaylist, setCurrentPlaylist, hideNavbar } from '../../actions'\nimport { searchPlaylist } from '../../PlaylistModel'\n\nconst mapStateToProps = (state, ownProps) => {\n  return {\n    songs: state.currentPlaylist,\n    muted: state.audioMuted,\n    nav: state.navbarHidden\n  };\n};\n\nconst mapDispatchToProps = (dispatch, ownProps) => ({\n  homepageControl: [() => ownProps.history.push(\"/trending\"), \"Back to the trending songs\"],\n  playlistControl: [\n    () => {let root = document.getElementById(\"miniPreview\");\n          while(root.firstChild) {root.removeChild(root.firstChild)};\n          ownProps.history.push(\"/myplaylist\")},\"Export to Spotify\"],\n  handleClick: (muted) => {\n    dispatch(muteAudio(muted));\n\n    let muteButton = document.body.querySelector('.muteButton');\n    let currentClass = muteButton.classList[1];\n    muteButton.classList.remove(currentClass);\n    muteButton.classList.add((currentClass == 'mute'? 'unmute' : 'mute'));\n\n    let audioElements = document.getElementsByTagName(\"audio\");\n    Object.keys(audioElements).map((i) =>\n      audioElements[i].muted = muted)\n\n  },\n  openNav: (nav) => {\n    dispatch(hideNavbar(nav));\n\n    var navbarDiv = document.getElementById(\"navbar\");\n    let currentClass = navbarDiv.classList[2];\n\n    navbarDiv.classList.remove(currentClass);\n    navbarDiv.classList.add((currentClass == 'hidden'? 'nothidden' : 'hidden'));\n  },\n\n  onDrop: (ev) => {\n    console.log(\"Dropped into playlist\");\n    let song = ev.dataTransfer.getData(\"text/plain\");\n    //console.log(JSON.parse(song));\n    dispatch(addSong(JSON.parse(song)));\n    //If song is already in playlist then don't put it in here.\n    let miniPreview = document.getElementById(\"miniPreview\");\n    let root = document.getElementById(JSON.parse(song).track.id); //The original large blob\n    let rootCopy = document.getElementById(JSON.parse(song).track.id).cloneNode(true); //this is the mini blob\n\n    //Change the svg/blob dimensions.\n    rootCopy.getElementsByTagName('g')[0].setAttribute(\"transform\", \"matrix(1 0 0 1 0 -10) scale(0.2)\");\n    rootCopy.getElementsByTagName('svg')[0].setAttribute(\"height\", \"50\");\n    rootCopy.getElementsByTagName('svg')[0].setAttribute(\"width\", \"50\");\n    //rootCopy.removeAttribute(\"class\");\n    //rootCopy.addAttribute(\"class\", \"miniBlob\");\n    //Add a button event to miniBlob that removes the song from playlist and makes large blob visible.\n    rootCopy.addEventListener('click', function(ev){\n      dispatch(removeSong(JSON.parse(song)));\n      var children = miniPreview.children;\n      for(var i = 0; i < children.length; i++) {\n        var currChild = children[i];\n        if(currChild.getAttribute(\"id\") == JSON.parse(song).track.id) {\n          miniPreview.removeChild(currChild);\n          break;\n        }\n      }\n      //Make root element visible.\n      root.getElementsByTagName('svg')[0].setAttribute(\"opacity\", \"1.0\");\n    });\n    rootCopy.style.height = \"70px\";\n    rootCopy.style.width = \"60px\";\n\n    miniPreview.appendChild(rootCopy);\n    //Lower the div oppacity to show it's been added.\n    root.getElementsByTagName('svg')[0].setAttribute(\"opacity\", \"0.2\");\n  },\n  onDragOver: (ev) => {\n    ev.preventDefault()\n  },\n  selectPlaylist: (playlistID) => {\n    document.querySelectorAll('.selected-playlist')\n      .forEach(button => button.classList.remove('selected-playlist'));\n\n    let selectedButton = document.body.querySelector('#playlist'+playlistID);\n    selectedButton.classList.add('selected-playlist');\n\n    searchPlaylist(playlistID).then(data => dispatch(setCurrentPlaylist(data)));\n    dispatch(loadPlaylist(playlistID));\n  }\n})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(NavbarPresentational);\n","import React, { useRef, useEffect } from 'react'\n\nconst SearchPresentational = ({ songs, whenDone, onResultsClick, onAdd, onLoadPlaylist }) => {\n  const [doneCallback, doneMessage] = whenDone;\n  const [addCallback, addMessage] = onAdd;\n\n  useEffect(() => {\n    onLoadPlaylist('37i9dQZEVXbMDoHDwVN2tF')\n  }, []);\n\n  return (\n    <div id=\"search\" className=\"mainContent debug\">\n      <div id=\"resultsDiv\" onClick={event => onResultsClick(event.target, songs)}></div>\n      {/* <button className=\"nav\" onClick={() => doneCallback()}>{doneMessage}</button> */}\n    </div>\n  )\n}\n\nexport default SearchPresentational\n","import SearchPresentational from './SearchPresentational'\nimport { connect } from 'react-redux'\nimport { addSong, setCurrentPlaylist, loadPlaylist } from '../../actions'\nimport { searchPlaylist } from '../../PlaylistModel'\n\nconst mapStateToProps = (state) => {\n  return { songs: state.currentPlaylist }\n};\n\nconst mapDispatchToProps = (dispatch, ownProps) => ({\n  whenDone: [() => ownProps.history.push(\"/myplaylist\"), \"Go to My Playlist\"],\n  onResultsClick: (clickedNode, loadedSongs) => {\n        var clickOnSong = clickedNode.classList.contains(\"song\");\n        var clickOnAddButton = clickedNode.classList.contains(\"addButton\");\n        if (clickOnSong) {\n          const song_id = clickedNode.id;\n          //console.log(\"Song clicked: \" + song_id);\n\n          clickedNode.childNodes[1].classList.remove('buttonInvisible');\n          document.querySelectorAll('.buttonVisible').forEach(button => {\n            button.classList.remove('buttonVisible');\n            button.classList.add('buttonInvisible');\n          });\n          clickedNode.firstChild.classList.add('buttonVisible');\n        }\n\n        if (clickOnAddButton) {\n          //console.log(clickedNode.parentNode.id);\n          let clickedSongId = clickedNode.parentNode.id;\n          let song = loadedSongs.find(d => d.track.id == clickedSongId);\n          //console.log({song});\n          dispatch(addSong(song));\n        }\n    },\n  onAdd: [(song) => dispatch(addSong(song)), \"Add to the playlist\"],\n  onLoadPlaylist: (idPlaylist) => {\n    searchPlaylist(idPlaylist).then(data => dispatch(setCurrentPlaylist(data)));\n    dispatch(loadPlaylist(idPlaylist));\n  }\n})\n\n\nexport default connect(mapStateToProps, mapDispatchToProps)(SearchPresentational);\n","import React from 'react'\n\nconst PlaylistPresentational = ({ songs, whenDone, onDelete, displaySong, getBlob}) => {\n    const [doneCallback, doneMessage] = whenDone;\n    return (\n      <div id=\"summary\" className=\"mainContent debug\">\n        <div>Current playlist:\n          <table>\n            <thead>\n              <tr>\n                <th>Song</th>\n                <th>Genre</th>\n                <th>Release date</th>\n              </tr>\n            </thead>\n            <tbody>\n              {songs.map((song, i) =>\n                <tr key={i}>\n                  <td id=\"blob\">{getBlob(song.track.id)}</td>\n                  <td>{displaySong(song)}</td>\n                  <td>{song.track.name}</td>\n                  <td><button onClick={() => onDelete(song)}>Delete from playlist</button></td>\n                </tr>\n              )}\n            </tbody>\n            <tfoot>\n              <tr><td>TOTAL SONGS</td><td></td><td>{songs.length}</td></tr>\n            </tfoot>\n          </table>\n        </div>\n        <div>\n          <button className=\"nav\" onClick={() => doneCallback()}>{doneMessage}</button>\n        </div>\n      </div>\n    )\n\n}\n\nexport default PlaylistPresentational\n","import { connect } from 'react-redux'\nimport PlaylistPresentational from './PlaylistPresentational'\nimport { removeSong } from '../../actions'\nimport { createSongDisplay, getBlob } from '../../PlaylistModel.js'\n\nconst mapStateToProps = (state) => {\n  return { songs: state.songs };\n};\n\nconst mapDispatchToProps = (dispatch, ownProps) => ({\n  whenDone: [() => ownProps.history.push(\"/trending\"), \"Back to the trending songs\"],\n  onDelete: song => dispatch(removeSong(song)),\n  displaySong: song => createSongDisplay(song),\n  getBlob: (id) => getBlob(id)\n  /*call: getBlobs()*/\n})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(PlaylistPresentational);\n","import React from 'react'\nimport { BrowserRouter as Router, Route, Redirect, Switch } from 'react-router-dom'\nimport Navbar from './Navbar/NavbarContainer'\nimport '../style.css'\nimport Search from './Search/SearchContainer'\nimport Playlist from './Playlist/PlaylistContainer'\n\nconst App = () => (\n    <Router>\n      <div className=\"flexParent\">\n        <Switch>\n          <Route exact path=\"/\" render={() => <Redirect to=\"/trending\" />} />\n        </Switch>\n        \n        <Route path=\"/trending\" component={Search}></Route>\n        <Route path=\"/myplaylist\" component={Playlist}></Route>\n        <Route component={Navbar}></Route>\n      </div>\n  </Router>\n)\n\nexport default App\n","function songs(state = [], action) {\n  let song = action.song;\n  switch (action.type) {\n    case 'ADD_SONG':\n      // Check if song is already in the playlist\n      console.log(state);\n      let alreadyPresent = state.some(d => d.track.id === song.track.id);\n      if (alreadyPresent) {\n        window.alert(`${song.track.name} is already present in the playlist.`);\n        return [...state];\n      } else {\n        return [...state, song];\n      }\n    case 'REMOVE_SONG':\n      return [...state].filter(d => d.track.id !== song.track.id);\n    default:\n      return [...state];\n  }\n}\n\nexport default songs\n","import {searchPlaylist, displaySongs} from '../PlaylistModel.js'\n\nconst currentPlaylist = (state = {}, action) => {\n  switch (action.type) {\n    case 'SET_PLAYLIST':\n      return action.songs;\n    case 'LOAD_PLAYLIST':\n      displaySongs(searchPlaylist(action.id)); //searchPlaylist() is a promise!\n      return state;\n    default:\n      return state;\n  }\n}\n\nexport default currentPlaylist\n","const audioMuted = (state = {}, action) => {\n  switch (action.type) {\n    case 'MUTE_AUDIO':\n      state.audioMuted = !action.bool;\n      return state;\n    default:\n      return state;\n  }\n}\n\nexport default audioMuted","const navbarHidden = (state = {}, action) => {\n  switch (action.type) {\n    case 'HIDE_NAVBAR':\n      state.navbarHidden = !action.bool;\n      return state;\n    default:\n      return state;\n  }\n}\n\nexport default navbarHidden","import { combineReducers } from 'redux'\nimport songs from './songs'\nimport currentPlaylist from './currentPlaylist'\nimport audioMuted from './audioMuted'\nimport navbarHidden from './navbarHidden'\n\nexport default combineReducers({\n  songs,\n  currentPlaylist,\n  audioMuted,\n  navbarHidden\n})\n","import React from 'react'\nimport { render } from 'react-dom'\nimport { createStore } from 'redux'\nimport { Provider } from 'react-redux'\nimport App from './components/App'\nimport rootReducer from './reducers'\nimport './style.css'\n\n// Retrieve saved model\nconst persistedState = localStorage.getItem('reduxState') ? JSON.parse(localStorage.getItem('reduxState')) : {};\nconst store = createStore(rootReducer, persistedState);\n// Update stored state when model changes\nstore.subscribe(() =>\n  localStorage.setItem('reduxState', JSON.stringify(store.getState()))\n);\n\nrender(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n)\n"],"sourceRoot":""}