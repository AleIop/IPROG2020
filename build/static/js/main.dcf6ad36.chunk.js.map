{"version":3,"sources":["apiConfig.js","renderPromise.js","components/Navbar/NavbarPresentational.js","actions/index.js","components/Navbar/NavbarContainer.js","components/Search/SearchPresentational.js","components/Search/SearchContainer.js","components/Playlist/PlaylistPresentational.js","components/Playlist/PlaylistContainer.js","components/App.js","reducers/songs.js","reducers/currentPlaylist.js","reducers/audioMuted.js","reducers/navbarHidden.js","reducers/index.js","index.js","PlaylistModel.js"],"names":["playlistENDPOINT","audioENDPOINT","clientID","secretID","RenderPromise","promise","hyperscript","node","this","cancelCallback","doCancel","ReactDOM","render","createSpinner","then","result","catch","error","errorSpan","message","React","createElement","className","height","alt","src","NavbarPresentational","songs","muted","nav","homepageControl","playlistControl","handleClick","openNav","onDrop","onDragOver","homepageAction","homepageMessage","playlistAction","playlistMessage","dropEvent","length","dragOverEvent","id","onClick","navbarHidden","audioMuted","addSong","song","type","connect","state","ownProps","currentPlaylist","dispatch","history","push","bool","muteButton","document","body","querySelector","currentClass","classList","remove","add","audioElements","getElementsByTagName","Object","keys","map","i","navbarDiv","getElementById","ev","console","log","dataTransfer","getData","JSON","parse","preventDefault","SearchPresentational","whenDone","onResultsClick","onAdd","onLoadPlaylist","useEffect","event","target","clickedNode","loadedSongs","clickOnSong","contains","clickOnAddButton","childNodes","querySelectorAll","forEach","button","firstChild","clickedSongId","parentNode","find","d","track","idPlaylist","searchPlaylist","data","PlaylistPresentational","onDelete","displaySong","doneCallback","doneMessage","key","removeSong","createSongDisplay","App","exact","path","to","component","Search","Playlist","Navbar","action","alreadyPresent","some","window","alert","name","addTime","computeAdditionTimestamp","filter","displaySongs","combineReducers","persistedState","localStorage","getItem","store","createStore","rootReducer","subscribe","setItem","stringify","getState","songListPromise","Fragment","setTimeout","root","retrieve","audio_features","features","svg","appendChild","preview_url","onDragStart","e","draggable","setData","effectAllowed","items","query","payload","apiConfig","encodedPayload","Buffer","toString","access_token","myHeaders","Headers","append","urlencoded","URLSearchParams","token","fetch","method","headers","redirect","response","json","a","fetchString","playlist","getSong"],"mappings":"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","file":"static/js/main.dcf6ad36.chunk.js","sourcesContent":["export const tokenENDPOINT= \"https://accounts.spotify.com/api/token\";\nexport const playlistENDPOINT = \"https://api.spotify.com/v1/playlists/\"\nexport const audioENDPOINT = \"https://api.spotify.com/v1/audio-features/\"\n\nexport const clientID = \"440325bb5cab47af9d5f1af2cad762fa\";\nexport const secretID = \"c5bf0b3bd0ca4d4eac5b684505d7665d\";","import React from 'react'\nimport ReactDOM from 'react-dom'\n\nclass RenderPromise {\n\n  static render(promise, hyperscript, node) {\n    if (this.cancelCallback) this.cancelCallback();\n  \tlet doCancel = false;\n\n  \tReactDOM.render(this.createSpinner(), node);\n\n  \tpromise.then(result => {\n  \t\t\tif (doCancel) return;\n        ReactDOM.render(hyperscript(result), node);\n  \t\t})\n  \t  .catch(error => {\n  \t\t\tif (doCancel) return;\n  \t\t\tconst errorSpan = (<span>{error.message}</span>);\n        ReactDOM.render(errorSpan, node);\n  \t\t})\n\n  \t\tthis.cancelCallback = () => {doCancel = true;};\n  }\n\n  static createSpinner() {\n  \treturn React.createElement(\"div\", {className: \"spinnerClass\"},\n            React.createElement(\"img\", {height: 100,  alt: \"\", src: \"http://cdn.lowgif.com/full/d9675675623d5f27-loading-gif-transparent-background-loading-gif.gif\"}));\n  }\n\n}\n\nexport default RenderPromise;\n","import React from 'react'\n\nconst NavbarPresentational = ({songs, muted, nav,  homepageControl, playlistControl, handleClick, openNav, onDrop, onDragOver}) => {\n  const [homepageAction, homepageMessage] = homepageControl;\n  const [playlistAction, playlistMessage] = playlistControl;\n  const nSongs = songs.length;\n  const dropEvent = onDrop;\n  const dragOverEvent = onDragOver;\n\n\n  return (\n    <div id=\"navbar\" className=\"navbar debug hidden\">\n\n      <h1 id=\"collection-title\" onClick={() => openNav(nav.navbarHidden)}>collection</h1>\n   \n      <div id=\"navbarContent\">\n        <button onClick={() => homepageAction()}>{homepageMessage}</button>\n        <br/>\n        <span>\n            {/* Displaying {nSongs} of the hottest songs!<br/>\n            Last update: insert time of last update here */}\n        </span>\n        \n        <br/>\n        \n          <button className=\"drophere playlistCss droppable\"\n                  onClick={() => playlistAction()}\n                  onDragOver={dragOverEvent}\n                  onDrop={dropEvent}>Drag and drop <br/>blobs here</button>\n\n          {/* <button className=\"playlistCss droppable\"\n                  onClick={() => playlistAction()}\n                  onDragOver={dragOverEvent}\n                  onDrop={dropEvent}>\n                  {playlistMessage}\n          </button><br/> */}\n          <button id=\"collection-button\" onClick={() => playlistAction()}>{playlistMessage}</button><br/>\n      </div>\n\n      <div className='muteButton mute' onClick={() => handleClick(muted.audioMuted)}></div>\n    </div>\n  )\n}\n\nexport default NavbarPresentational\n","export const addSong = song => ({\n  type: 'ADD_SONG',\n  song\n})\n\nexport const removeSong = song => ({\n  type: 'REMOVE_SONG',\n  song\n})\n\nexport const setCurrentPlaylist = songs => ({\n  type: 'SET_PLAYLIST', \n  songs\n})\n\nexport const loadPlaylist = id => ({\n  type: 'LOAD_PLAYLIST',\n  id\n})\n\nexport const muteAudio = bool =>({\n  type: 'MUTE_AUDIO',\n  bool\n})\n\nexport const hideNavbar = bool =>({\n  type: 'HIDE_NAVBAR',\n  bool\n})","import { connect } from 'react-redux'\nimport NavbarPresentational from './NavbarPresentational'\nimport { hideNavbar } from '../../actions'\nimport { muteAudio, addSong } from '../../actions'\n\nconst mapStateToProps = (state, ownProps) => {\n  return {\n    songs: state.currentPlaylist,\n    muted: state.audioMuted,\n    nav: state.navbarHidden\n  };\n};\n\nconst mapDispatchToProps = (dispatch, ownProps) => ({\n  homepageControl: [() => ownProps.history.push(\"/trending\"), \"Back to the trending songs\"],\n  playlistControl: [() => ownProps.history.push(\"/myplaylist\"), \"My playlist\"],\n  handleClick: (muted) => {\n    dispatch(muteAudio(muted));\n\n    let muteButton = document.body.querySelector('.muteButton');\n    let currentClass = muteButton.classList[1];\n    muteButton.classList.remove(currentClass);\n    muteButton.classList.add((currentClass == 'mute'? 'unmute' : 'mute'));\n\n    let audioElements = document.getElementsByTagName(\"audio\");\n    Object.keys(audioElements).map((i) =>\n      audioElements[i].muted = muted)\n    \n  },\n  openNav: (nav) => {\n    dispatch(hideNavbar(nav));\n\n    var navbarDiv = document.getElementById(\"navbar\");\n    let currentClass = navbarDiv.classList[2];\n\n    navbarDiv.classList.remove(currentClass);\n    navbarDiv.classList.add((currentClass == 'hidden'? 'nothidden' : 'hidden'));\n  },\n\n  onDrop: (ev) => {\n    console.log(\"Dropped into playlist\");\n    let song = ev.dataTransfer.getData(\"text/plain\");\n    //console.log(JSON.parse(song));\n    dispatch(addSong(JSON.parse(song)));\n  },\n  onDragOver: (ev) => {\n    ev.preventDefault()\n  }\n})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(NavbarPresentational);\n","import React, { useRef, useEffect } from 'react'\n\nconst SearchPresentational = ({ songs, whenDone, onResultsClick, onAdd, onLoadPlaylist }) => {\n  const [doneCallback, doneMessage] = whenDone;\n  const [addCallback, addMessage] = onAdd;\n\n  useEffect(() => {\n    onLoadPlaylist('37i9dQZEVXbMDoHDwVN2tF')\n  }, []);\n\n  return (\n    <div id=\"search\" className=\"mainContent debug\">\n      <div id=\"resultsDiv\" onClick={event => onResultsClick(event.target, songs)}></div>\n      {/* <button className=\"nav\" onClick={() => doneCallback()}>{doneMessage}</button> */}\n    </div>\n  )\n}\n\nexport default SearchPresentational\n","import SearchPresentational from './SearchPresentational'\nimport { connect } from 'react-redux'\nimport { addSong, setCurrentPlaylist, loadPlaylist } from '../../actions'\nimport { searchPlaylist } from '../../PlaylistModel'\n\nconst mapStateToProps = (state) => {\n  return { songs: state.currentPlaylist }\n};\n\nconst mapDispatchToProps = (dispatch, ownProps) => ({\n  whenDone: [() => ownProps.history.push(\"/myplaylist\"), \"Go to My Playlist\"],\n  onResultsClick: (clickedNode, loadedSongs) => {\n        var clickOnSong = clickedNode.classList.contains(\"song\");\n        var clickOnAddButton = clickedNode.classList.contains(\"addButton\");\n        if (clickOnSong) {\n          const song_id = clickedNode.id;\n          //console.log(\"Song clicked: \" + song_id);\n\n          clickedNode.childNodes[1].classList.remove('buttonInvisible');\n          document.querySelectorAll('.buttonVisible').forEach(button => {\n            button.classList.remove('buttonVisible');\n            button.classList.add('buttonInvisible');\n          });\n          clickedNode.firstChild.classList.add('buttonVisible');\n        }\n\n        if (clickOnAddButton) {\n          //console.log(clickedNode.parentNode.id);\n          let clickedSongId = clickedNode.parentNode.id;\n          let song = loadedSongs.find(d => d.track.id == clickedSongId);\n          //console.log({song});\n          dispatch(addSong(song));\n        }\n    },\n  onAdd: [(song) => dispatch(addSong(song)), \"Add to the playlist\"],\n  onLoadPlaylist: (idPlaylist) => {\n    searchPlaylist(idPlaylist).then(data => dispatch(setCurrentPlaylist(data)));\n    dispatch(loadPlaylist(idPlaylist));\n  }\n})\n\n\nexport default connect(mapStateToProps, mapDispatchToProps)(SearchPresentational);\n","import React from 'react'\n\nconst PlaylistPresentational = ({ songs, whenDone, onDelete, displaySong }) => {\n    const [doneCallback, doneMessage] = whenDone;\n\n    return (\n      <div id=\"summary\" className=\"mainContent debug\">\n        <div>Current playlist:\n          <table>\n            <thead>\n              <tr>\n                <th>Song</th>\n                <th>Genre</th>\n                <th>Release date</th>\n              </tr>\n            </thead>\n            <tbody>\n              {songs.map((song, i) =>\n                <tr key={i}>\n                  <td>{displaySong(song)}</td>\n                  <td>{song.track.id}</td>\n                  <td><button onClick={() => onDelete(song)}>Delete from playlist</button></td>\n                </tr>\n              )}\n            </tbody>\n            <tfoot>\n              <tr><td>TOTAL SONGS</td><td></td><td>{songs.length}</td></tr>\n            </tfoot>\n          </table>\n        </div>\n        <div>\n          <button className=\"nav\" onClick={() => doneCallback()}>{doneMessage}</button>\n        </div>\n      </div>\n    )\n\n}\n\nexport default PlaylistPresentational\n","import { connect } from 'react-redux'\nimport PlaylistPresentational from './PlaylistPresentational'\nimport { removeSong } from '../../actions'\nimport { createSongDisplay } from '../../PlaylistModel.js'\n\nconst mapStateToProps = (state) => {\n  return { songs: state.songs };\n};\n\nconst mapDispatchToProps = (dispatch, ownProps) => ({\n  whenDone: [() => ownProps.history.push(\"/trending\"), \"Back to the trending songs\"],\n  onDelete: song => dispatch(removeSong(song)),\n  displaySong: song => createSongDisplay(song)\n})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(PlaylistPresentational);\n","import React from 'react'\nimport { BrowserRouter as Router, Route, Redirect, Switch } from 'react-router-dom'\nimport Navbar from './Navbar/NavbarContainer'\nimport '../style.css'\nimport Search from './Search/SearchContainer'\nimport Playlist from './Playlist/PlaylistContainer'\n\nconst App = () => (\n    <Router>\n      <div className=\"flexParent\">\n        <Switch>\n          <Route exact path=\"/\" render={() => <Redirect to=\"/trending\" />} />\n        </Switch>\n        \n        <Route path=\"/trending\" component={Search}></Route>\n        <Route path=\"/myplaylist\" component={Playlist}></Route>\n        <Route component={Navbar}></Route>\n      </div>\n  </Router>\n)\n\nexport default App\n","import { computeAdditionTimestamp } from '../PlaylistModel.js'\n\nfunction songs(state = [], action) {\n  let song = action.song;\n  switch (action.type) {\n    case 'ADD_SONG':\n      // Check if song is already in the playlist\n      let alreadyPresent = state.some(d => d.track.id === song.track.id);\n      if (alreadyPresent) {\n        window.alert(`${song.track.name} is already present in the playlist.`);\n        return [...state];\n      } else {\n        // Compute time of addition\n        song.addTime = computeAdditionTimestamp(song);\n        return [...state, song];\n      }\n    case 'REMOVE_SONG':\n      return [...state].filter(d => d.track.id !== song.track.id);\n    default:\n      return [...state];\n  }\n}\n\nexport default songs\n","import {searchPlaylist, displaySongs} from '../PlaylistModel.js'\n\nconst currentPlaylist = (state = {}, action) => {\n  switch (action.type) {\n    case 'SET_PLAYLIST':\n      return action.songs;\n    case 'LOAD_PLAYLIST':\n      displaySongs(searchPlaylist(action.id)); //searchPlaylist() is a promise!\n      return state;\n    default:\n      return state;\n  }\n}\n\nexport default currentPlaylist\n","const audioMuted = (state = {}, action) => {\n  switch (action.type) {\n    case 'MUTE_AUDIO':\n      state.audioMuted = !action.bool;\n      return state;\n    default:\n      return state;\n  }\n}\n\nexport default audioMuted","const navbarHidden = (state = {}, action) => {\n  switch (action.type) {\n    case 'HIDE_NAVBAR':\n      state.navbarHidden = !action.bool;\n      return state;\n    default:\n      return state;\n  }\n}\n\nexport default navbarHidden","import { combineReducers } from 'redux'\nimport songs from './songs'\nimport currentPlaylist from './currentPlaylist'\nimport audioMuted from './audioMuted'\nimport navbarHidden from './navbarHidden'\n\nexport default combineReducers({\n  songs,\n  currentPlaylist,\n  audioMuted,\n  navbarHidden\n})\n","import React from 'react'\nimport { render } from 'react-dom'\nimport { createStore } from 'redux'\nimport { Provider } from 'react-redux'\nimport App from './components/App'\nimport rootReducer from './reducers'\nimport './style.css'\n\n// Retrieve saved model\nconst persistedState = localStorage.getItem('reduxState') ? JSON.parse(localStorage.getItem('reduxState')) : {};\nconst store = createStore(rootReducer, persistedState);\n// Update stored state when model changes\nstore.subscribe(() =>\n  localStorage.setItem('reduxState', JSON.stringify(store.getState()))\n);\n\nrender(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n)\n","import * as apiConfig from './apiConfig.js'\nimport RenderPromise from './renderPromise.js'\nimport React from 'react'\n\n  export function displaySongs(songListPromise) {\n    RenderPromise.render(\n      songListPromise,\n      songs => React.createElement(React.Fragment, {}, songs.map(song => createSongDisplay(song))),\n      document.getElementById('resultsDiv'));\n\n    setTimeout(() => {\n      let songs = document.body.querySelectorAll('.song');\n      songs.forEach(song => {\n        let root = document.getElementById(song.id);\n        searchAudioFeatures(song.id).then(features => {\n\n          var svg = window[\"blobCreator\"](features);\n          root.appendChild(svg);\n\n        });\n      });\n    }, 1000);\n  }\n\n  /*\n    Give drag drop element to this.\n  */\n  export function createSongDisplay(song) {\n    if (song.track.preview_url !== null){\n    return (\n      <div id={song.track.id} key={song.track.id} className='song draggable'\n            onDragStart={(e)=>onDragStart(e, song)} draggable>\n        <audio id={'audio'+song.track.id} src={song.track.preview_url} muted></audio>\n        {/* <button className='addButton buttonInvisible'>Add to playlist</button><br/> */}\n        <br/>\n      </div>\n    );\n    }\n  }\n\n  const onDragStart = (ev, song) => {\n    console.log(\"Song \" + song.track.name + \" is being dragged\");\n    ev.dataTransfer.setData(\"text/plain\", JSON.stringify(song));\n    ev.dataTransfer.effectAllowed = \"copy\";\n  }\n\n  export function getSongDetails(song_id) {\n    //TODO return acoustic features of song\n  }\n\n  export function computeAdditionTimestamp(song) {\n    //return current time\n  }\n\n  export function searchPlaylist(name) {\n    // Replace variables in case they are falsy (e.g. empty string, null, undefined)\n    name = name || \"37i9dQZEVXbMDoHDwVN2tF\";\n\n    return retrieve(name, 'playlist').then(data => data.items); // leave out the unimportant parts of the response data\n  }\n\n  export function searchAudioFeatures(id) {\n    // Replace variables in case they are falsy (e.g. empty string, null, undefined)\n    id = id || \"\";\n\n    return retrieve('?ids='+id, 'audio').then(data => data.audio_features[0]);\n  }\n\n  export function retrieve(query, type) {\n    const payload = apiConfig.clientID+\":\"+apiConfig.secretID;\n    const encodedPayload = new Buffer(payload).toString(\"base64\");\n\n    let access_token = \"\";\n\n    const myHeaders = new Headers();\n    myHeaders.append(\"Authorization\", \"Basic \" + encodedPayload);\n    const urlencoded = new URLSearchParams();\n    urlencoded.append(\"grant_type\", \"client_credentials\");\n    const requestOptions = {\n      method: 'POST',\n      headers: myHeaders,\n      body: urlencoded,\n      redirect: 'follow'\n    };\n    const token = fetch(\"https://accounts.spotify.com/api/token\", requestOptions)\n    .then(response => response.json())\n    .catch(error => console.log('error', error));\n\n    async function getSong(type) {\n      let wait = await token.then(result => access_token = result.access_token);\n      let fetchString = (type == 'playlist') ?\n        apiConfig.playlistENDPOINT + query + '/tracks' :\n        apiConfig.audioENDPOINT + query;\n\n      let playlist = fetch(fetchString, {\n        method: 'GET',\n        headers: {\n          'Accept': 'application/json',\n          'Content-Type': 'application/json',\n          'Authorization': 'Bearer ' + access_token\n        }\n      }).then(response => {\n        return response.json();\n      });\n\n      return playlist;\n    }\n\n    return getSong(type);\n  }\n"],"sourceRoot":""}